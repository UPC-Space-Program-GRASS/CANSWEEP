
CANSWEEP_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000402c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004204  08004204  00005204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004214  08004214  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004214  08004214  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004214  08004214  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004214  08004214  00005214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004218  08004218  00005218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800421c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d0  2000000c  08004228  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005dc  08004228  000065dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015795  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ac2  00000000  00000000  0001b7d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  0001e298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f5f  00000000  00000000  0001f6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027ed6  00000000  00000000  00020607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000169b8  00000000  00000000  000484dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001053ac  00000000  00000000  0005ee95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00164241  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005660  00000000  00000000  00164284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001698e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080041ec 	.word	0x080041ec

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080041ec 	.word	0x080041ec

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 feff 	bl	800101e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f814 	bl	800024c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 fb06 	bl	8000834 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000228:	f000 fa60 	bl	80006ec <MX_I2C1_Init>
  MX_SPI1_Init();
 800022c:	f000 fa9e 	bl	800076c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000230:	f000 fad8 	bl	80007e4 <MX_USB_PCD_Init>
  MX_ADC3_Init();
 8000234:	f000 f934 	bl	80004a0 <MX_ADC3_Init>
  MX_ADC4_Init();
 8000238:	f000 f9aa 	bl	8000590 <MX_ADC4_Init>
  MX_FDCAN2_Init();
 800023c:	f000 fa10 	bl	8000660 <MX_FDCAN2_Init>
  MX_ADC1_Init();
 8000240:	f000 f850 	bl	80002e4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000244:	f000 f8c6 	bl	80003d4 <MX_ADC2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000248:	bf00      	nop
 800024a:	e7fd      	b.n	8000248 <main+0x30>

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b094      	sub	sp, #80	@ 0x50
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	f107 0318 	add.w	r3, r7, #24
 8000256:	2238      	movs	r2, #56	@ 0x38
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f003 ff9a 	bl	8004194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	60da      	str	r2, [r3, #12]
 800026c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800026e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000272:	f002 feb3 	bl	8002fdc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000276:	2302      	movs	r3, #2
 8000278:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800027e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000280:	2340      	movs	r3, #64	@ 0x40
 8000282:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000284:	2302      	movs	r3, #2
 8000286:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000288:	2302      	movs	r3, #2
 800028a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800028c:	2301      	movs	r3, #1
 800028e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000290:	230c      	movs	r3, #12
 8000292:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000294:	2302      	movs	r3, #2
 8000296:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000298:	2304      	movs	r3, #4
 800029a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800029c:	2302      	movs	r3, #2
 800029e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a0:	f107 0318 	add.w	r3, r7, #24
 80002a4:	4618      	mov	r0, r3
 80002a6:	f002 ff4d 	bl	8003144 <HAL_RCC_OscConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80002b0:	f000 fb9a 	bl	80009e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b4:	230f      	movs	r3, #15
 80002b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002b8:	2301      	movs	r3, #1
 80002ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	2100      	movs	r1, #0
 80002cc:	4618      	mov	r0, r3
 80002ce:	f003 fa4b 	bl	8003768 <HAL_RCC_ClockConfig>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80002d8:	f000 fb86 	bl	80009e8 <Error_Handler>
  }
}
 80002dc:	bf00      	nop
 80002de:	3750      	adds	r7, #80	@ 0x50
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b08c      	sub	sp, #48	@ 0x30
 80002e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2220      	movs	r2, #32
 80002fa:	2100      	movs	r1, #0
 80002fc:	4618      	mov	r0, r3
 80002fe:	f003 ff49 	bl	8004194 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000302:	4b32      	ldr	r3, [pc, #200]	@ (80003cc <MX_ADC1_Init+0xe8>)
 8000304:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000308:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800030a:	4b30      	ldr	r3, [pc, #192]	@ (80003cc <MX_ADC1_Init+0xe8>)
 800030c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000310:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000312:	4b2e      	ldr	r3, [pc, #184]	@ (80003cc <MX_ADC1_Init+0xe8>)
 8000314:	2200      	movs	r2, #0
 8000316:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000318:	4b2c      	ldr	r3, [pc, #176]	@ (80003cc <MX_ADC1_Init+0xe8>)
 800031a:	2200      	movs	r2, #0
 800031c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800031e:	4b2b      	ldr	r3, [pc, #172]	@ (80003cc <MX_ADC1_Init+0xe8>)
 8000320:	2200      	movs	r2, #0
 8000322:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000324:	4b29      	ldr	r3, [pc, #164]	@ (80003cc <MX_ADC1_Init+0xe8>)
 8000326:	2200      	movs	r2, #0
 8000328:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800032a:	4b28      	ldr	r3, [pc, #160]	@ (80003cc <MX_ADC1_Init+0xe8>)
 800032c:	2204      	movs	r2, #4
 800032e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000330:	4b26      	ldr	r3, [pc, #152]	@ (80003cc <MX_ADC1_Init+0xe8>)
 8000332:	2200      	movs	r2, #0
 8000334:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000336:	4b25      	ldr	r3, [pc, #148]	@ (80003cc <MX_ADC1_Init+0xe8>)
 8000338:	2200      	movs	r2, #0
 800033a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800033c:	4b23      	ldr	r3, [pc, #140]	@ (80003cc <MX_ADC1_Init+0xe8>)
 800033e:	2201      	movs	r2, #1
 8000340:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000342:	4b22      	ldr	r3, [pc, #136]	@ (80003cc <MX_ADC1_Init+0xe8>)
 8000344:	2200      	movs	r2, #0
 8000346:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800034a:	4b20      	ldr	r3, [pc, #128]	@ (80003cc <MX_ADC1_Init+0xe8>)
 800034c:	2200      	movs	r2, #0
 800034e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000350:	4b1e      	ldr	r3, [pc, #120]	@ (80003cc <MX_ADC1_Init+0xe8>)
 8000352:	2200      	movs	r2, #0
 8000354:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000356:	4b1d      	ldr	r3, [pc, #116]	@ (80003cc <MX_ADC1_Init+0xe8>)
 8000358:	2200      	movs	r2, #0
 800035a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800035e:	4b1b      	ldr	r3, [pc, #108]	@ (80003cc <MX_ADC1_Init+0xe8>)
 8000360:	2200      	movs	r2, #0
 8000362:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000364:	4b19      	ldr	r3, [pc, #100]	@ (80003cc <MX_ADC1_Init+0xe8>)
 8000366:	2200      	movs	r2, #0
 8000368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800036c:	4817      	ldr	r0, [pc, #92]	@ (80003cc <MX_ADC1_Init+0xe8>)
 800036e:	f001 f89d 	bl	80014ac <HAL_ADC_Init>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000378:	f000 fb36 	bl	80009e8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800037c:	2300      	movs	r3, #0
 800037e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000380:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000384:	4619      	mov	r1, r3
 8000386:	4811      	ldr	r0, [pc, #68]	@ (80003cc <MX_ADC1_Init+0xe8>)
 8000388:	f001 feb2 	bl	80020f0 <HAL_ADCEx_MultiModeConfigChannel>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000392:	f000 fb29 	bl	80009e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000396:	4b0e      	ldr	r3, [pc, #56]	@ (80003d0 <MX_ADC1_Init+0xec>)
 8000398:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800039a:	2306      	movs	r3, #6
 800039c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800039e:	2300      	movs	r3, #0
 80003a0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003a2:	237f      	movs	r3, #127	@ 0x7f
 80003a4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003a6:	2304      	movs	r3, #4
 80003a8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003aa:	2300      	movs	r3, #0
 80003ac:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	4619      	mov	r1, r3
 80003b2:	4806      	ldr	r0, [pc, #24]	@ (80003cc <MX_ADC1_Init+0xe8>)
 80003b4:	f001 fa36 	bl	8001824 <HAL_ADC_ConfigChannel>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80003be:	f000 fb13 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003c2:	bf00      	nop
 80003c4:	3730      	adds	r7, #48	@ 0x30
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	20000028 	.word	0x20000028
 80003d0:	32601000 	.word	0x32601000

080003d4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b088      	sub	sp, #32
 80003d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003da:	463b      	mov	r3, r7
 80003dc:	2220      	movs	r2, #32
 80003de:	2100      	movs	r1, #0
 80003e0:	4618      	mov	r0, r3
 80003e2:	f003 fed7 	bl	8004194 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80003e6:	4b2b      	ldr	r3, [pc, #172]	@ (8000494 <MX_ADC2_Init+0xc0>)
 80003e8:	4a2b      	ldr	r2, [pc, #172]	@ (8000498 <MX_ADC2_Init+0xc4>)
 80003ea:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80003ec:	4b29      	ldr	r3, [pc, #164]	@ (8000494 <MX_ADC2_Init+0xc0>)
 80003ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80003f2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80003f4:	4b27      	ldr	r3, [pc, #156]	@ (8000494 <MX_ADC2_Init+0xc0>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003fa:	4b26      	ldr	r3, [pc, #152]	@ (8000494 <MX_ADC2_Init+0xc0>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000400:	4b24      	ldr	r3, [pc, #144]	@ (8000494 <MX_ADC2_Init+0xc0>)
 8000402:	2200      	movs	r2, #0
 8000404:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000406:	4b23      	ldr	r3, [pc, #140]	@ (8000494 <MX_ADC2_Init+0xc0>)
 8000408:	2200      	movs	r2, #0
 800040a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800040c:	4b21      	ldr	r3, [pc, #132]	@ (8000494 <MX_ADC2_Init+0xc0>)
 800040e:	2204      	movs	r2, #4
 8000410:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000412:	4b20      	ldr	r3, [pc, #128]	@ (8000494 <MX_ADC2_Init+0xc0>)
 8000414:	2200      	movs	r2, #0
 8000416:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000418:	4b1e      	ldr	r3, [pc, #120]	@ (8000494 <MX_ADC2_Init+0xc0>)
 800041a:	2200      	movs	r2, #0
 800041c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800041e:	4b1d      	ldr	r3, [pc, #116]	@ (8000494 <MX_ADC2_Init+0xc0>)
 8000420:	2201      	movs	r2, #1
 8000422:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000424:	4b1b      	ldr	r3, [pc, #108]	@ (8000494 <MX_ADC2_Init+0xc0>)
 8000426:	2200      	movs	r2, #0
 8000428:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800042c:	4b19      	ldr	r3, [pc, #100]	@ (8000494 <MX_ADC2_Init+0xc0>)
 800042e:	2200      	movs	r2, #0
 8000430:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000432:	4b18      	ldr	r3, [pc, #96]	@ (8000494 <MX_ADC2_Init+0xc0>)
 8000434:	2200      	movs	r2, #0
 8000436:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000438:	4b16      	ldr	r3, [pc, #88]	@ (8000494 <MX_ADC2_Init+0xc0>)
 800043a:	2200      	movs	r2, #0
 800043c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000440:	4b14      	ldr	r3, [pc, #80]	@ (8000494 <MX_ADC2_Init+0xc0>)
 8000442:	2200      	movs	r2, #0
 8000444:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000446:	4b13      	ldr	r3, [pc, #76]	@ (8000494 <MX_ADC2_Init+0xc0>)
 8000448:	2200      	movs	r2, #0
 800044a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800044e:	4811      	ldr	r0, [pc, #68]	@ (8000494 <MX_ADC2_Init+0xc0>)
 8000450:	f001 f82c 	bl	80014ac <HAL_ADC_Init>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800045a:	f000 fac5 	bl	80009e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800045e:	4b0f      	ldr	r3, [pc, #60]	@ (800049c <MX_ADC2_Init+0xc8>)
 8000460:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000462:	2306      	movs	r3, #6
 8000464:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000466:	2300      	movs	r3, #0
 8000468:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800046a:	237f      	movs	r3, #127	@ 0x7f
 800046c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800046e:	2304      	movs	r3, #4
 8000470:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000472:	2300      	movs	r3, #0
 8000474:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000476:	463b      	mov	r3, r7
 8000478:	4619      	mov	r1, r3
 800047a:	4806      	ldr	r0, [pc, #24]	@ (8000494 <MX_ADC2_Init+0xc0>)
 800047c:	f001 f9d2 	bl	8001824 <HAL_ADC_ConfigChannel>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000486:	f000 faaf 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800048a:	bf00      	nop
 800048c:	3720      	adds	r7, #32
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	20000094 	.word	0x20000094
 8000498:	50000100 	.word	0x50000100
 800049c:	32601000 	.word	0x32601000

080004a0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b08c      	sub	sp, #48	@ 0x30
 80004a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80004a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2220      	movs	r2, #32
 80004b6:	2100      	movs	r1, #0
 80004b8:	4618      	mov	r0, r3
 80004ba:	f003 fe6b 	bl	8004194 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80004be:	4b31      	ldr	r3, [pc, #196]	@ (8000584 <MX_ADC3_Init+0xe4>)
 80004c0:	4a31      	ldr	r2, [pc, #196]	@ (8000588 <MX_ADC3_Init+0xe8>)
 80004c2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004c4:	4b2f      	ldr	r3, [pc, #188]	@ (8000584 <MX_ADC3_Init+0xe4>)
 80004c6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80004ca:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80004cc:	4b2d      	ldr	r3, [pc, #180]	@ (8000584 <MX_ADC3_Init+0xe4>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004d2:	4b2c      	ldr	r3, [pc, #176]	@ (8000584 <MX_ADC3_Init+0xe4>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80004d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000584 <MX_ADC3_Init+0xe4>)
 80004da:	2200      	movs	r2, #0
 80004dc:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004de:	4b29      	ldr	r3, [pc, #164]	@ (8000584 <MX_ADC3_Init+0xe4>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004e4:	4b27      	ldr	r3, [pc, #156]	@ (8000584 <MX_ADC3_Init+0xe4>)
 80004e6:	2204      	movs	r2, #4
 80004e8:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80004ea:	4b26      	ldr	r3, [pc, #152]	@ (8000584 <MX_ADC3_Init+0xe4>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80004f0:	4b24      	ldr	r3, [pc, #144]	@ (8000584 <MX_ADC3_Init+0xe4>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 80004f6:	4b23      	ldr	r3, [pc, #140]	@ (8000584 <MX_ADC3_Init+0xe4>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80004fc:	4b21      	ldr	r3, [pc, #132]	@ (8000584 <MX_ADC3_Init+0xe4>)
 80004fe:	2200      	movs	r2, #0
 8000500:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000504:	4b1f      	ldr	r3, [pc, #124]	@ (8000584 <MX_ADC3_Init+0xe4>)
 8000506:	2200      	movs	r2, #0
 8000508:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800050a:	4b1e      	ldr	r3, [pc, #120]	@ (8000584 <MX_ADC3_Init+0xe4>)
 800050c:	2200      	movs	r2, #0
 800050e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000510:	4b1c      	ldr	r3, [pc, #112]	@ (8000584 <MX_ADC3_Init+0xe4>)
 8000512:	2200      	movs	r2, #0
 8000514:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000518:	4b1a      	ldr	r3, [pc, #104]	@ (8000584 <MX_ADC3_Init+0xe4>)
 800051a:	2200      	movs	r2, #0
 800051c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800051e:	4b19      	ldr	r3, [pc, #100]	@ (8000584 <MX_ADC3_Init+0xe4>)
 8000520:	2200      	movs	r2, #0
 8000522:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000526:	4817      	ldr	r0, [pc, #92]	@ (8000584 <MX_ADC3_Init+0xe4>)
 8000528:	f000 ffc0 	bl	80014ac <HAL_ADC_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8000532:	f000 fa59 	bl	80009e8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000536:	2300      	movs	r3, #0
 8000538:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800053a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800053e:	4619      	mov	r1, r3
 8000540:	4810      	ldr	r0, [pc, #64]	@ (8000584 <MX_ADC3_Init+0xe4>)
 8000542:	f001 fdd5 	bl	80020f0 <HAL_ADCEx_MultiModeConfigChannel>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 800054c:	f000 fa4c 	bl	80009e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000550:	4b0e      	ldr	r3, [pc, #56]	@ (800058c <MX_ADC3_Init+0xec>)
 8000552:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000554:	2306      	movs	r3, #6
 8000556:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000558:	2300      	movs	r3, #0
 800055a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800055c:	237f      	movs	r3, #127	@ 0x7f
 800055e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000560:	2304      	movs	r3, #4
 8000562:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	4619      	mov	r1, r3
 800056c:	4805      	ldr	r0, [pc, #20]	@ (8000584 <MX_ADC3_Init+0xe4>)
 800056e:	f001 f959 	bl	8001824 <HAL_ADC_ConfigChannel>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8000578:	f000 fa36 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800057c:	bf00      	nop
 800057e:	3730      	adds	r7, #48	@ 0x30
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000100 	.word	0x20000100
 8000588:	50000400 	.word	0x50000400
 800058c:	14f00020 	.word	0x14f00020

08000590 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000596:	463b      	mov	r3, r7
 8000598:	2220      	movs	r2, #32
 800059a:	2100      	movs	r1, #0
 800059c:	4618      	mov	r0, r3
 800059e:	f003 fdf9 	bl	8004194 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80005a2:	4b2b      	ldr	r3, [pc, #172]	@ (8000650 <MX_ADC4_Init+0xc0>)
 80005a4:	4a2b      	ldr	r2, [pc, #172]	@ (8000654 <MX_ADC4_Init+0xc4>)
 80005a6:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005a8:	4b29      	ldr	r3, [pc, #164]	@ (8000650 <MX_ADC4_Init+0xc0>)
 80005aa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80005ae:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80005b0:	4b27      	ldr	r3, [pc, #156]	@ (8000650 <MX_ADC4_Init+0xc0>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b6:	4b26      	ldr	r3, [pc, #152]	@ (8000650 <MX_ADC4_Init+0xc0>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80005bc:	4b24      	ldr	r3, [pc, #144]	@ (8000650 <MX_ADC4_Init+0xc0>)
 80005be:	2200      	movs	r2, #0
 80005c0:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005c2:	4b23      	ldr	r3, [pc, #140]	@ (8000650 <MX_ADC4_Init+0xc0>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005c8:	4b21      	ldr	r3, [pc, #132]	@ (8000650 <MX_ADC4_Init+0xc0>)
 80005ca:	2204      	movs	r2, #4
 80005cc:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80005ce:	4b20      	ldr	r3, [pc, #128]	@ (8000650 <MX_ADC4_Init+0xc0>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 80005d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000650 <MX_ADC4_Init+0xc0>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 80005da:	4b1d      	ldr	r3, [pc, #116]	@ (8000650 <MX_ADC4_Init+0xc0>)
 80005dc:	2201      	movs	r2, #1
 80005de:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80005e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000650 <MX_ADC4_Init+0xc0>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e8:	4b19      	ldr	r3, [pc, #100]	@ (8000650 <MX_ADC4_Init+0xc0>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ee:	4b18      	ldr	r3, [pc, #96]	@ (8000650 <MX_ADC4_Init+0xc0>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80005f4:	4b16      	ldr	r3, [pc, #88]	@ (8000650 <MX_ADC4_Init+0xc0>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005fc:	4b14      	ldr	r3, [pc, #80]	@ (8000650 <MX_ADC4_Init+0xc0>)
 80005fe:	2200      	movs	r2, #0
 8000600:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000602:	4b13      	ldr	r3, [pc, #76]	@ (8000650 <MX_ADC4_Init+0xc0>)
 8000604:	2200      	movs	r2, #0
 8000606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800060a:	4811      	ldr	r0, [pc, #68]	@ (8000650 <MX_ADC4_Init+0xc0>)
 800060c:	f000 ff4e 	bl	80014ac <HAL_ADC_Init>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 8000616:	f000 f9e7 	bl	80009e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800061a:	4b0f      	ldr	r3, [pc, #60]	@ (8000658 <MX_ADC4_Init+0xc8>)
 800061c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800061e:	2306      	movs	r3, #6
 8000620:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000622:	2300      	movs	r3, #0
 8000624:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000626:	4b0d      	ldr	r3, [pc, #52]	@ (800065c <MX_ADC4_Init+0xcc>)
 8000628:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800062a:	2304      	movs	r3, #4
 800062c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000632:	463b      	mov	r3, r7
 8000634:	4619      	mov	r1, r3
 8000636:	4806      	ldr	r0, [pc, #24]	@ (8000650 <MX_ADC4_Init+0xc0>)
 8000638:	f001 f8f4 	bl	8001824 <HAL_ADC_ConfigChannel>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 8000642:	f000 f9d1 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000646:	bf00      	nop
 8000648:	3720      	adds	r7, #32
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	2000016c 	.word	0x2000016c
 8000654:	50000500 	.word	0x50000500
 8000658:	0c900008 	.word	0x0c900008
 800065c:	407f0000 	.word	0x407f0000

08000660 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000664:	4b1f      	ldr	r3, [pc, #124]	@ (80006e4 <MX_FDCAN2_Init+0x84>)
 8000666:	4a20      	ldr	r2, [pc, #128]	@ (80006e8 <MX_FDCAN2_Init+0x88>)
 8000668:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800066a:	4b1e      	ldr	r3, [pc, #120]	@ (80006e4 <MX_FDCAN2_Init+0x84>)
 800066c:	2200      	movs	r2, #0
 800066e:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000670:	4b1c      	ldr	r3, [pc, #112]	@ (80006e4 <MX_FDCAN2_Init+0x84>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000676:	4b1b      	ldr	r3, [pc, #108]	@ (80006e4 <MX_FDCAN2_Init+0x84>)
 8000678:	2200      	movs	r2, #0
 800067a:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800067c:	4b19      	ldr	r3, [pc, #100]	@ (80006e4 <MX_FDCAN2_Init+0x84>)
 800067e:	2200      	movs	r2, #0
 8000680:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000682:	4b18      	ldr	r3, [pc, #96]	@ (80006e4 <MX_FDCAN2_Init+0x84>)
 8000684:	2200      	movs	r2, #0
 8000686:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000688:	4b16      	ldr	r3, [pc, #88]	@ (80006e4 <MX_FDCAN2_Init+0x84>)
 800068a:	2200      	movs	r2, #0
 800068c:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 800068e:	4b15      	ldr	r3, [pc, #84]	@ (80006e4 <MX_FDCAN2_Init+0x84>)
 8000690:	2210      	movs	r2, #16
 8000692:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000694:	4b13      	ldr	r3, [pc, #76]	@ (80006e4 <MX_FDCAN2_Init+0x84>)
 8000696:	2201      	movs	r2, #1
 8000698:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 1;
 800069a:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <MX_FDCAN2_Init+0x84>)
 800069c:	2201      	movs	r2, #1
 800069e:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 1;
 80006a0:	4b10      	ldr	r3, [pc, #64]	@ (80006e4 <MX_FDCAN2_Init+0x84>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80006a6:	4b0f      	ldr	r3, [pc, #60]	@ (80006e4 <MX_FDCAN2_Init+0x84>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80006ac:	4b0d      	ldr	r3, [pc, #52]	@ (80006e4 <MX_FDCAN2_Init+0x84>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80006b2:	4b0c      	ldr	r3, [pc, #48]	@ (80006e4 <MX_FDCAN2_Init+0x84>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	@ (80006e4 <MX_FDCAN2_Init+0x84>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 80006be:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <MX_FDCAN2_Init+0x84>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 80006c4:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <MX_FDCAN2_Init+0x84>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80006ca:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <MX_FDCAN2_Init+0x84>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80006d0:	4804      	ldr	r0, [pc, #16]	@ (80006e4 <MX_FDCAN2_Init+0x84>)
 80006d2:	f001 fef9 	bl	80024c8 <HAL_FDCAN_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 80006dc:	f000 f984 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	200001d8 	.word	0x200001d8
 80006e8:	40006800 	.word	0x40006800

080006ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000760 <MX_I2C1_Init+0x74>)
 80006f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000764 <MX_I2C1_Init+0x78>)
 80006f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 80006f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000760 <MX_I2C1_Init+0x74>)
 80006f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000768 <MX_I2C1_Init+0x7c>)
 80006fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006fc:	4b18      	ldr	r3, [pc, #96]	@ (8000760 <MX_I2C1_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000702:	4b17      	ldr	r3, [pc, #92]	@ (8000760 <MX_I2C1_Init+0x74>)
 8000704:	2201      	movs	r2, #1
 8000706:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000708:	4b15      	ldr	r3, [pc, #84]	@ (8000760 <MX_I2C1_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800070e:	4b14      	ldr	r3, [pc, #80]	@ (8000760 <MX_I2C1_Init+0x74>)
 8000710:	2200      	movs	r2, #0
 8000712:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000714:	4b12      	ldr	r3, [pc, #72]	@ (8000760 <MX_I2C1_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800071a:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <MX_I2C1_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000720:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <MX_I2C1_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000726:	480e      	ldr	r0, [pc, #56]	@ (8000760 <MX_I2C1_Init+0x74>)
 8000728:	f002 fa2e 	bl	8002b88 <HAL_I2C_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000732:	f000 f959 	bl	80009e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000736:	2100      	movs	r1, #0
 8000738:	4809      	ldr	r0, [pc, #36]	@ (8000760 <MX_I2C1_Init+0x74>)
 800073a:	f002 fac0 	bl	8002cbe <HAL_I2CEx_ConfigAnalogFilter>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000744:	f000 f950 	bl	80009e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000748:	2100      	movs	r1, #0
 800074a:	4805      	ldr	r0, [pc, #20]	@ (8000760 <MX_I2C1_Init+0x74>)
 800074c:	f002 fb02 	bl	8002d54 <HAL_I2CEx_ConfigDigitalFilter>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000756:	f000 f947 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	2000023c 	.word	0x2000023c
 8000764:	40005400 	.word	0x40005400
 8000768:	00503d58 	.word	0x00503d58

0800076c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000770:	4b1a      	ldr	r3, [pc, #104]	@ (80007dc <MX_SPI1_Init+0x70>)
 8000772:	4a1b      	ldr	r2, [pc, #108]	@ (80007e0 <MX_SPI1_Init+0x74>)
 8000774:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000776:	4b19      	ldr	r3, [pc, #100]	@ (80007dc <MX_SPI1_Init+0x70>)
 8000778:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800077c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800077e:	4b17      	ldr	r3, [pc, #92]	@ (80007dc <MX_SPI1_Init+0x70>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000784:	4b15      	ldr	r3, [pc, #84]	@ (80007dc <MX_SPI1_Init+0x70>)
 8000786:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800078a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800078c:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <MX_SPI1_Init+0x70>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000792:	4b12      	ldr	r3, [pc, #72]	@ (80007dc <MX_SPI1_Init+0x70>)
 8000794:	2200      	movs	r2, #0
 8000796:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000798:	4b10      	ldr	r3, [pc, #64]	@ (80007dc <MX_SPI1_Init+0x70>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800079e:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <MX_SPI1_Init+0x70>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a4:	4b0d      	ldr	r3, [pc, #52]	@ (80007dc <MX_SPI1_Init+0x70>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007aa:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <MX_SPI1_Init+0x70>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	@ (80007dc <MX_SPI1_Init+0x70>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007b6:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_SPI1_Init+0x70>)
 80007b8:	2207      	movs	r2, #7
 80007ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007bc:	4b07      	ldr	r3, [pc, #28]	@ (80007dc <MX_SPI1_Init+0x70>)
 80007be:	2200      	movs	r2, #0
 80007c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007c2:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <MX_SPI1_Init+0x70>)
 80007c4:	2208      	movs	r2, #8
 80007c6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	@ (80007dc <MX_SPI1_Init+0x70>)
 80007ca:	f003 fbff 	bl	8003fcc <HAL_SPI_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_SPI1_Init+0x6c>
  {
    Error_Handler();
 80007d4:	f000 f908 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000290 	.word	0x20000290
 80007e0:	40013000 	.word	0x40013000

080007e4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80007e8:	4b10      	ldr	r3, [pc, #64]	@ (800082c <MX_USB_PCD_Init+0x48>)
 80007ea:	4a11      	ldr	r2, [pc, #68]	@ (8000830 <MX_USB_PCD_Init+0x4c>)
 80007ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80007ee:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <MX_USB_PCD_Init+0x48>)
 80007f0:	2208      	movs	r2, #8
 80007f2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80007f4:	4b0d      	ldr	r3, [pc, #52]	@ (800082c <MX_USB_PCD_Init+0x48>)
 80007f6:	2202      	movs	r2, #2
 80007f8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007fa:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <MX_USB_PCD_Init+0x48>)
 80007fc:	2202      	movs	r2, #2
 80007fe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000800:	4b0a      	ldr	r3, [pc, #40]	@ (800082c <MX_USB_PCD_Init+0x48>)
 8000802:	2200      	movs	r2, #0
 8000804:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000806:	4b09      	ldr	r3, [pc, #36]	@ (800082c <MX_USB_PCD_Init+0x48>)
 8000808:	2200      	movs	r2, #0
 800080a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800080c:	4b07      	ldr	r3, [pc, #28]	@ (800082c <MX_USB_PCD_Init+0x48>)
 800080e:	2200      	movs	r2, #0
 8000810:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000812:	4b06      	ldr	r3, [pc, #24]	@ (800082c <MX_USB_PCD_Init+0x48>)
 8000814:	2200      	movs	r2, #0
 8000816:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000818:	4804      	ldr	r0, [pc, #16]	@ (800082c <MX_USB_PCD_Init+0x48>)
 800081a:	f002 fae7 	bl	8002dec <HAL_PCD_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000824:	f000 f8e0 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	200002f4 	.word	0x200002f4
 8000830:	40005c00 	.word	0x40005c00

08000834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	@ 0x28
 8000838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800084a:	4b64      	ldr	r3, [pc, #400]	@ (80009dc <MX_GPIO_Init+0x1a8>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084e:	4a63      	ldr	r2, [pc, #396]	@ (80009dc <MX_GPIO_Init+0x1a8>)
 8000850:	f043 0320 	orr.w	r3, r3, #32
 8000854:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000856:	4b61      	ldr	r3, [pc, #388]	@ (80009dc <MX_GPIO_Init+0x1a8>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085a:	f003 0320 	and.w	r3, r3, #32
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	4b5e      	ldr	r3, [pc, #376]	@ (80009dc <MX_GPIO_Init+0x1a8>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000866:	4a5d      	ldr	r2, [pc, #372]	@ (80009dc <MX_GPIO_Init+0x1a8>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086e:	4b5b      	ldr	r3, [pc, #364]	@ (80009dc <MX_GPIO_Init+0x1a8>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	4b58      	ldr	r3, [pc, #352]	@ (80009dc <MX_GPIO_Init+0x1a8>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087e:	4a57      	ldr	r2, [pc, #348]	@ (80009dc <MX_GPIO_Init+0x1a8>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000886:	4b55      	ldr	r3, [pc, #340]	@ (80009dc <MX_GPIO_Init+0x1a8>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	4b52      	ldr	r3, [pc, #328]	@ (80009dc <MX_GPIO_Init+0x1a8>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000896:	4a51      	ldr	r2, [pc, #324]	@ (80009dc <MX_GPIO_Init+0x1a8>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800089e:	4b4f      	ldr	r3, [pc, #316]	@ (80009dc <MX_GPIO_Init+0x1a8>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nSLEEP_GPIO_Port, nSLEEP_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2101      	movs	r1, #1
 80008ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008b2:	f002 f951 	bl	8002b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LSWITCH_OUT_Pin */
  GPIO_InitStruct.Pin = LSWITCH_OUT_Pin;
 80008b6:	2301      	movs	r3, #1
 80008b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LSWITCH_OUT_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	4845      	ldr	r0, [pc, #276]	@ (80009e0 <MX_GPIO_Init+0x1ac>)
 80008ca:	f001 ffc3 	bl	8002854 <HAL_GPIO_Init>

  /*Configure GPIO pin : nSLEEP_Pin */
  GPIO_InitStruct.Pin = nSLEEP_Pin;
 80008ce:	2301      	movs	r3, #1
 80008d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nSLEEP_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4619      	mov	r1, r3
 80008e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e8:	f001 ffb4 	bl	8002854 <HAL_GPIO_Init>

  /*Configure GPIO pins : nFAULT_Pin nSTALL_Pin */
  GPIO_InitStruct.Pin = nFAULT_Pin|nSTALL_Pin;
 80008ec:	2306      	movs	r3, #6
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4619      	mov	r1, r3
 80008fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000902:	f001 ffa7 	bl	8002854 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_AIN2_Pin */
  GPIO_InitStruct.Pin = DIR_AIN2_Pin;
 8000906:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800090a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8000918:	2304      	movs	r3, #4
 800091a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DIR_AIN2_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4619      	mov	r1, r3
 8000922:	4830      	ldr	r0, [pc, #192]	@ (80009e4 <MX_GPIO_Init+0x1b0>)
 8000924:	f001 ff96 	bl	8002854 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_AIN1_Pin */
  GPIO_InitStruct.Pin = STEP_AIN1_Pin;
 8000928:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800092c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	2302      	movs	r3, #2
 8000930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800093a:	2306      	movs	r3, #6
 800093c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(STEP_AIN1_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4619      	mov	r1, r3
 8000944:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000948:	f001 ff84 	bl	8002854 <HAL_GPIO_Init>

  /*Configure GPIO pin : BIN1_Pin */
  GPIO_InitStruct.Pin = BIN1_Pin;
 800094c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 800095e:	2302      	movs	r3, #2
 8000960:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BIN1_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	4619      	mov	r1, r3
 8000968:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800096c:	f001 ff72 	bl	8002854 <HAL_GPIO_Init>

  /*Configure GPIO pin : BIN2_Pin */
  GPIO_InitStruct.Pin = BIN2_Pin;
 8000970:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8000982:	2304      	movs	r3, #4
 8000984:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BIN2_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4619      	mov	r1, r3
 800098c:	4814      	ldr	r0, [pc, #80]	@ (80009e0 <MX_GPIO_Init+0x1ac>)
 800098e:	f001 ff61 	bl	8002854 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_PULSE1_Pin */
  GPIO_InitStruct.Pin = ENCODER_PULSE1_Pin;
 8000992:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000998:	2302      	movs	r3, #2
 800099a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 80009a4:	2301      	movs	r3, #1
 80009a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ENCODER_PULSE1_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4619      	mov	r1, r3
 80009ae:	480c      	ldr	r0, [pc, #48]	@ (80009e0 <MX_GPIO_Init+0x1ac>)
 80009b0:	f001 ff50 	bl	8002854 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_PULSE2_Pin */
  GPIO_InitStruct.Pin = ENCODER_PULSE2_Pin;
 80009b4:	2308      	movs	r3, #8
 80009b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009c4:	2301      	movs	r3, #1
 80009c6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ENCODER_PULSE2_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	4805      	ldr	r0, [pc, #20]	@ (80009e4 <MX_GPIO_Init+0x1b0>)
 80009d0:	f001 ff40 	bl	8002854 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009d4:	bf00      	nop
 80009d6:	3728      	adds	r7, #40	@ 0x28
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40021000 	.word	0x40021000
 80009e0:	48000800 	.word	0x48000800
 80009e4:	48000400 	.word	0x48000400

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
}
 80009ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <Error_Handler+0x8>

080009f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000a38 <HAL_MspInit+0x44>)
 80009fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000a38 <HAL_MspInit+0x44>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a06:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <HAL_MspInit+0x44>)
 8000a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a12:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <HAL_MspInit+0x44>)
 8000a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a16:	4a08      	ldr	r2, [pc, #32]	@ (8000a38 <HAL_MspInit+0x44>)
 8000a18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a1e:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <HAL_MspInit+0x44>)
 8000a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a2a:	f002 fb7b 	bl	8003124 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40021000 	.word	0x40021000

08000a3c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b0a6      	sub	sp, #152	@ 0x98
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a54:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a58:	2254      	movs	r2, #84	@ 0x54
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f003 fb99 	bl	8004194 <memset>
  if(hadc->Instance==ADC1)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000a6a:	d140      	bne.n	8000aee <HAL_ADC_MspInit+0xb2>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000a6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a70:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000a72:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000a76:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a78:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f003 f857 	bl	8003b30 <HAL_RCCEx_PeriphCLKConfig>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000a88:	f7ff ffae 	bl	80009e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a8c:	4b91      	ldr	r3, [pc, #580]	@ (8000cd4 <HAL_ADC_MspInit+0x298>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	3301      	adds	r3, #1
 8000a92:	4a90      	ldr	r2, [pc, #576]	@ (8000cd4 <HAL_ADC_MspInit+0x298>)
 8000a94:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a96:	4b8f      	ldr	r3, [pc, #572]	@ (8000cd4 <HAL_ADC_MspInit+0x298>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d10b      	bne.n	8000ab6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a9e:	4b8e      	ldr	r3, [pc, #568]	@ (8000cd8 <HAL_ADC_MspInit+0x29c>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa2:	4a8d      	ldr	r2, [pc, #564]	@ (8000cd8 <HAL_ADC_MspInit+0x29c>)
 8000aa4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000aa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aaa:	4b8b      	ldr	r3, [pc, #556]	@ (8000cd8 <HAL_ADC_MspInit+0x29c>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	4b88      	ldr	r3, [pc, #544]	@ (8000cd8 <HAL_ADC_MspInit+0x29c>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aba:	4a87      	ldr	r2, [pc, #540]	@ (8000cd8 <HAL_ADC_MspInit+0x29c>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac2:	4b85      	ldr	r3, [pc, #532]	@ (8000cd8 <HAL_ADC_MspInit+0x29c>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = _5V_f_Pin;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(_5V_f_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	487d      	ldr	r0, [pc, #500]	@ (8000cdc <HAL_ADC_MspInit+0x2a0>)
 8000ae8:	f001 feb4 	bl	8002854 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC4_MspInit 1 */

    /* USER CODE END ADC4_MspInit 1 */
  }

}
 8000aec:	e0ed      	b.n	8000cca <HAL_ADC_MspInit+0x28e>
  else if(hadc->Instance==ADC2)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a7b      	ldr	r2, [pc, #492]	@ (8000ce0 <HAL_ADC_MspInit+0x2a4>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d15b      	bne.n	8000bb0 <HAL_ADC_MspInit+0x174>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000af8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000afc:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000afe:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000b02:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b04:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f003 f811 	bl	8003b30 <HAL_RCCEx_PeriphCLKConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <HAL_ADC_MspInit+0xdc>
      Error_Handler();
 8000b14:	f7ff ff68 	bl	80009e8 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000b18:	4b6e      	ldr	r3, [pc, #440]	@ (8000cd4 <HAL_ADC_MspInit+0x298>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	4a6d      	ldr	r2, [pc, #436]	@ (8000cd4 <HAL_ADC_MspInit+0x298>)
 8000b20:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000b22:	4b6c      	ldr	r3, [pc, #432]	@ (8000cd4 <HAL_ADC_MspInit+0x298>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d10b      	bne.n	8000b42 <HAL_ADC_MspInit+0x106>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000b2a:	4b6b      	ldr	r3, [pc, #428]	@ (8000cd8 <HAL_ADC_MspInit+0x29c>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2e:	4a6a      	ldr	r2, [pc, #424]	@ (8000cd8 <HAL_ADC_MspInit+0x29c>)
 8000b30:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b36:	4b68      	ldr	r3, [pc, #416]	@ (8000cd8 <HAL_ADC_MspInit+0x29c>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b42:	4b65      	ldr	r3, [pc, #404]	@ (8000cd8 <HAL_ADC_MspInit+0x29c>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b46:	4a64      	ldr	r2, [pc, #400]	@ (8000cd8 <HAL_ADC_MspInit+0x29c>)
 8000b48:	f043 0304 	orr.w	r3, r3, #4
 8000b4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b4e:	4b62      	ldr	r3, [pc, #392]	@ (8000cd8 <HAL_ADC_MspInit+0x29c>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b52:	f003 0304 	and.w	r3, r3, #4
 8000b56:	623b      	str	r3, [r7, #32]
 8000b58:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	4b5f      	ldr	r3, [pc, #380]	@ (8000cd8 <HAL_ADC_MspInit+0x29c>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5e:	4a5e      	ldr	r2, [pc, #376]	@ (8000cd8 <HAL_ADC_MspInit+0x29c>)
 8000b60:	f043 0302 	orr.w	r3, r3, #2
 8000b64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b66:	4b5c      	ldr	r3, [pc, #368]	@ (8000cd8 <HAL_ADC_MspInit+0x29c>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	61fb      	str	r3, [r7, #28]
 8000b70:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = VBAT_I_OUT_Pin;
 8000b72:	2310      	movs	r3, #16
 8000b74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(VBAT_I_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4856      	ldr	r0, [pc, #344]	@ (8000ce4 <HAL_ADC_MspInit+0x2a8>)
 8000b8c:	f001 fe62 	bl	8002854 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = _3v3_f_Pin;
 8000b90:	2304      	movs	r3, #4
 8000b92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b96:	2303      	movs	r3, #3
 8000b98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(_3v3_f_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	484c      	ldr	r0, [pc, #304]	@ (8000cdc <HAL_ADC_MspInit+0x2a0>)
 8000baa:	f001 fe53 	bl	8002854 <HAL_GPIO_Init>
}
 8000bae:	e08c      	b.n	8000cca <HAL_ADC_MspInit+0x28e>
  else if(hadc->Instance==ADC3)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a4c      	ldr	r2, [pc, #304]	@ (8000ce8 <HAL_ADC_MspInit+0x2ac>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d141      	bne.n	8000c3e <HAL_ADC_MspInit+0x202>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000bba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bbe:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000bc0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000bc4:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bc6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f002 ffb0 	bl	8003b30 <HAL_RCCEx_PeriphCLKConfig>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <HAL_ADC_MspInit+0x19e>
      Error_Handler();
 8000bd6:	f7ff ff07 	bl	80009e8 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000bda:	4b44      	ldr	r3, [pc, #272]	@ (8000cec <HAL_ADC_MspInit+0x2b0>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	3301      	adds	r3, #1
 8000be0:	4a42      	ldr	r2, [pc, #264]	@ (8000cec <HAL_ADC_MspInit+0x2b0>)
 8000be2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000be4:	4b41      	ldr	r3, [pc, #260]	@ (8000cec <HAL_ADC_MspInit+0x2b0>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d10b      	bne.n	8000c04 <HAL_ADC_MspInit+0x1c8>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000bec:	4b3a      	ldr	r3, [pc, #232]	@ (8000cd8 <HAL_ADC_MspInit+0x29c>)
 8000bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf0:	4a39      	ldr	r2, [pc, #228]	@ (8000cd8 <HAL_ADC_MspInit+0x29c>)
 8000bf2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bf6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bf8:	4b37      	ldr	r3, [pc, #220]	@ (8000cd8 <HAL_ADC_MspInit+0x29c>)
 8000bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c00:	61bb      	str	r3, [r7, #24]
 8000c02:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c04:	4b34      	ldr	r3, [pc, #208]	@ (8000cd8 <HAL_ADC_MspInit+0x29c>)
 8000c06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c08:	4a33      	ldr	r2, [pc, #204]	@ (8000cd8 <HAL_ADC_MspInit+0x29c>)
 8000c0a:	f043 0302 	orr.w	r3, r3, #2
 8000c0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c10:	4b31      	ldr	r3, [pc, #196]	@ (8000cd8 <HAL_ADC_MspInit+0x29c>)
 8000c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c14:	f003 0302 	and.w	r3, r3, #2
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PH_A_f_Pin;
 8000c1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c24:	2303      	movs	r3, #3
 8000c26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(PH_A_f_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000c34:	4619      	mov	r1, r3
 8000c36:	4829      	ldr	r0, [pc, #164]	@ (8000cdc <HAL_ADC_MspInit+0x2a0>)
 8000c38:	f001 fe0c 	bl	8002854 <HAL_GPIO_Init>
}
 8000c3c:	e045      	b.n	8000cca <HAL_ADC_MspInit+0x28e>
  else if(hadc->Instance==ADC4)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a2b      	ldr	r2, [pc, #172]	@ (8000cf0 <HAL_ADC_MspInit+0x2b4>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d140      	bne.n	8000cca <HAL_ADC_MspInit+0x28e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000c48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c4c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000c4e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000c52:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c54:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f002 ff69 	bl	8003b30 <HAL_RCCEx_PeriphCLKConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <HAL_ADC_MspInit+0x22c>
      Error_Handler();
 8000c64:	f7ff fec0 	bl	80009e8 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000c68:	4b20      	ldr	r3, [pc, #128]	@ (8000cec <HAL_ADC_MspInit+0x2b0>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	4a1f      	ldr	r2, [pc, #124]	@ (8000cec <HAL_ADC_MspInit+0x2b0>)
 8000c70:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000c72:	4b1e      	ldr	r3, [pc, #120]	@ (8000cec <HAL_ADC_MspInit+0x2b0>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d10b      	bne.n	8000c92 <HAL_ADC_MspInit+0x256>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000c7a:	4b17      	ldr	r3, [pc, #92]	@ (8000cd8 <HAL_ADC_MspInit+0x29c>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7e:	4a16      	ldr	r2, [pc, #88]	@ (8000cd8 <HAL_ADC_MspInit+0x29c>)
 8000c80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c86:	4b14      	ldr	r3, [pc, #80]	@ (8000cd8 <HAL_ADC_MspInit+0x29c>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	4b11      	ldr	r3, [pc, #68]	@ (8000cd8 <HAL_ADC_MspInit+0x29c>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c96:	4a10      	ldr	r2, [pc, #64]	@ (8000cd8 <HAL_ADC_MspInit+0x29c>)
 8000c98:	f043 0302 	orr.w	r3, r3, #2
 8000c9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <HAL_ADC_MspInit+0x29c>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PH_B_f_Pin|VBUS_f_Pin;
 8000caa:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8000cae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbe:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4805      	ldr	r0, [pc, #20]	@ (8000cdc <HAL_ADC_MspInit+0x2a0>)
 8000cc6:	f001 fdc5 	bl	8002854 <HAL_GPIO_Init>
}
 8000cca:	bf00      	nop
 8000ccc:	3798      	adds	r7, #152	@ 0x98
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200005d0 	.word	0x200005d0
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	48000400 	.word	0x48000400
 8000ce0:	50000100 	.word	0x50000100
 8000ce4:	48000800 	.word	0x48000800
 8000ce8:	50000400 	.word	0x50000400
 8000cec:	200005d4 	.word	0x200005d4
 8000cf0:	50000500 	.word	0x50000500

08000cf4 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b09e      	sub	sp, #120	@ 0x78
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d0c:	f107 0310 	add.w	r3, r7, #16
 8000d10:	2254      	movs	r2, #84	@ 0x54
 8000d12:	2100      	movs	r1, #0
 8000d14:	4618      	mov	r0, r3
 8000d16:	f003 fa3d 	bl	8004194 <memset>
  if(hfdcan->Instance==FDCAN2)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a1f      	ldr	r2, [pc, #124]	@ (8000d9c <HAL_FDCAN_MspInit+0xa8>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d137      	bne.n	8000d94 <HAL_FDCAN_MspInit+0xa0>

    /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000d24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d28:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000d2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000d2e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d30:	f107 0310 	add.w	r3, r7, #16
 8000d34:	4618      	mov	r0, r3
 8000d36:	f002 fefb 	bl	8003b30 <HAL_RCCEx_PeriphCLKConfig>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000d40:	f7ff fe52 	bl	80009e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000d44:	4b16      	ldr	r3, [pc, #88]	@ (8000da0 <HAL_FDCAN_MspInit+0xac>)
 8000d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d48:	4a15      	ldr	r2, [pc, #84]	@ (8000da0 <HAL_FDCAN_MspInit+0xac>)
 8000d4a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d50:	4b13      	ldr	r3, [pc, #76]	@ (8000da0 <HAL_FDCAN_MspInit+0xac>)
 8000d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5c:	4b10      	ldr	r3, [pc, #64]	@ (8000da0 <HAL_FDCAN_MspInit+0xac>)
 8000d5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d60:	4a0f      	ldr	r2, [pc, #60]	@ (8000da0 <HAL_FDCAN_MspInit+0xac>)
 8000d62:	f043 0302 	orr.w	r3, r3, #2
 8000d66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d68:	4b0d      	ldr	r3, [pc, #52]	@ (8000da0 <HAL_FDCAN_MspInit+0xac>)
 8000d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000d74:	2360      	movs	r3, #96	@ 0x60
 8000d76:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000d84:	2309      	movs	r3, #9
 8000d86:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d88:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4805      	ldr	r0, [pc, #20]	@ (8000da4 <HAL_FDCAN_MspInit+0xb0>)
 8000d90:	f001 fd60 	bl	8002854 <HAL_GPIO_Init>

    /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 8000d94:	bf00      	nop
 8000d96:	3778      	adds	r7, #120	@ 0x78
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40006800 	.word	0x40006800
 8000da0:	40021000 	.word	0x40021000
 8000da4:	48000400 	.word	0x48000400

08000da8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b09e      	sub	sp, #120	@ 0x78
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	2254      	movs	r2, #84	@ 0x54
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f003 f9e3 	bl	8004194 <memset>
  if(hi2c->Instance==I2C1)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a1f      	ldr	r2, [pc, #124]	@ (8000e50 <HAL_I2C_MspInit+0xa8>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d136      	bne.n	8000e46 <HAL_I2C_MspInit+0x9e>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000dd8:	2340      	movs	r3, #64	@ 0x40
 8000dda:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	4618      	mov	r0, r3
 8000de6:	f002 fea3 	bl	8003b30 <HAL_RCCEx_PeriphCLKConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000df0:	f7ff fdfa 	bl	80009e8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df4:	4b17      	ldr	r3, [pc, #92]	@ (8000e54 <HAL_I2C_MspInit+0xac>)
 8000df6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df8:	4a16      	ldr	r2, [pc, #88]	@ (8000e54 <HAL_I2C_MspInit+0xac>)
 8000dfa:	f043 0302 	orr.w	r3, r3, #2
 8000dfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e00:	4b14      	ldr	r3, [pc, #80]	@ (8000e54 <HAL_I2C_MspInit+0xac>)
 8000e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e04:	f003 0302 	and.w	r3, r3, #2
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000e0c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e10:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e12:	2312      	movs	r3, #18
 8000e14:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e1e:	2304      	movs	r3, #4
 8000e20:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e22:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e26:	4619      	mov	r1, r3
 8000e28:	480b      	ldr	r0, [pc, #44]	@ (8000e58 <HAL_I2C_MspInit+0xb0>)
 8000e2a:	f001 fd13 	bl	8002854 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e2e:	4b09      	ldr	r3, [pc, #36]	@ (8000e54 <HAL_I2C_MspInit+0xac>)
 8000e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e32:	4a08      	ldr	r2, [pc, #32]	@ (8000e54 <HAL_I2C_MspInit+0xac>)
 8000e34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e38:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e3a:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <HAL_I2C_MspInit+0xac>)
 8000e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000e46:	bf00      	nop
 8000e48:	3778      	adds	r7, #120	@ 0x78
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40005400 	.word	0x40005400
 8000e54:	40021000 	.word	0x40021000
 8000e58:	48000400 	.word	0x48000400

08000e5c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	@ 0x28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a17      	ldr	r2, [pc, #92]	@ (8000ed8 <HAL_SPI_MspInit+0x7c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d128      	bne.n	8000ed0 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e7e:	4b17      	ldr	r3, [pc, #92]	@ (8000edc <HAL_SPI_MspInit+0x80>)
 8000e80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e82:	4a16      	ldr	r2, [pc, #88]	@ (8000edc <HAL_SPI_MspInit+0x80>)
 8000e84:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e88:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e8a:	4b14      	ldr	r3, [pc, #80]	@ (8000edc <HAL_SPI_MspInit+0x80>)
 8000e8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	4b11      	ldr	r3, [pc, #68]	@ (8000edc <HAL_SPI_MspInit+0x80>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9a:	4a10      	ldr	r2, [pc, #64]	@ (8000edc <HAL_SPI_MspInit+0x80>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <HAL_SPI_MspInit+0x80>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000eae:	23f0      	movs	r3, #240	@ 0xf0
 8000eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ebe:	2305      	movs	r3, #5
 8000ec0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ecc:	f001 fcc2 	bl	8002854 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000ed0:	bf00      	nop
 8000ed2:	3728      	adds	r7, #40	@ 0x28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40013000 	.word	0x40013000
 8000edc:	40021000 	.word	0x40021000

08000ee0 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b098      	sub	sp, #96	@ 0x60
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	2254      	movs	r2, #84	@ 0x54
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f003 f94f 	bl	8004194 <memset>
  if(hpcd->Instance==USB)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a11      	ldr	r2, [pc, #68]	@ (8000f40 <HAL_PCD_MspInit+0x60>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d11b      	bne.n	8000f38 <HAL_PCD_MspInit+0x58>

    /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f04:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000f06:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000f0a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f0c:	f107 030c 	add.w	r3, r7, #12
 8000f10:	4618      	mov	r0, r3
 8000f12:	f002 fe0d 	bl	8003b30 <HAL_RCCEx_PeriphCLKConfig>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8000f1c:	f7ff fd64 	bl	80009e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000f20:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <HAL_PCD_MspInit+0x64>)
 8000f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f24:	4a07      	ldr	r2, [pc, #28]	@ (8000f44 <HAL_PCD_MspInit+0x64>)
 8000f26:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000f2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f2c:	4b05      	ldr	r3, [pc, #20]	@ (8000f44 <HAL_PCD_MspInit+0x64>)
 8000f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_MspInit 1 */

  }

}
 8000f38:	bf00      	nop
 8000f3a:	3760      	adds	r7, #96	@ 0x60
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40005c00 	.word	0x40005c00
 8000f44:	40021000 	.word	0x40021000

08000f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <NMI_Handler+0x4>

08000f50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <HardFault_Handler+0x4>

08000f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <MemManage_Handler+0x4>

08000f60 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <BusFault_Handler+0x4>

08000f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <UsageFault_Handler+0x4>

08000f70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f9e:	f000 f891 	bl	80010c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fac:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <SystemInit+0x20>)
 8000fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fb2:	4a05      	ldr	r2, [pc, #20]	@ (8000fc8 <SystemInit+0x20>)
 8000fb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fcc:	480d      	ldr	r0, [pc, #52]	@ (8001004 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fd0:	f7ff ffea 	bl	8000fa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fd4:	480c      	ldr	r0, [pc, #48]	@ (8001008 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fd6:	490d      	ldr	r1, [pc, #52]	@ (800100c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001010 <LoopForever+0xe>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000fdc:	e002      	b.n	8000fe4 <LoopCopyDataInit>

08000fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe2:	3304      	adds	r3, #4

08000fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe8:	d3f9      	bcc.n	8000fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fea:	4a0a      	ldr	r2, [pc, #40]	@ (8001014 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fec:	4c0a      	ldr	r4, [pc, #40]	@ (8001018 <LoopForever+0x16>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff0:	e001      	b.n	8000ff6 <LoopFillZerobss>

08000ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff4:	3204      	adds	r2, #4

08000ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff8:	d3fb      	bcc.n	8000ff2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ffa:	f003 f8d3 	bl	80041a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ffe:	f7ff f90b 	bl	8000218 <main>

08001002 <LoopForever>:

LoopForever:
    b LoopForever
 8001002:	e7fe      	b.n	8001002 <LoopForever>
  ldr   r0, =_estack
 8001004:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800100c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001010:	0800421c 	.word	0x0800421c
  ldr r2, =_sbss
 8001014:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001018:	200005dc 	.word	0x200005dc

0800101c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800101c:	e7fe      	b.n	800101c <ADC1_2_IRQHandler>

0800101e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001024:	2300      	movs	r3, #0
 8001026:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001028:	2003      	movs	r0, #3
 800102a:	f001 fa1b 	bl	8002464 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800102e:	200f      	movs	r0, #15
 8001030:	f000 f80e 	bl	8001050 <HAL_InitTick>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d002      	beq.n	8001040 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	71fb      	strb	r3, [r7, #7]
 800103e:	e001      	b.n	8001044 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001040:	f7ff fcd8 	bl	80009f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001044:	79fb      	ldrb	r3, [r7, #7]

}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800105c:	4b16      	ldr	r3, [pc, #88]	@ (80010b8 <HAL_InitTick+0x68>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d022      	beq.n	80010aa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001064:	4b15      	ldr	r3, [pc, #84]	@ (80010bc <HAL_InitTick+0x6c>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <HAL_InitTick+0x68>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001070:	fbb1 f3f3 	udiv	r3, r1, r3
 8001074:	fbb2 f3f3 	udiv	r3, r2, r3
 8001078:	4618      	mov	r0, r3
 800107a:	f001 fa18 	bl	80024ae <HAL_SYSTICK_Config>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d10f      	bne.n	80010a4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b0f      	cmp	r3, #15
 8001088:	d809      	bhi.n	800109e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800108a:	2200      	movs	r2, #0
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	f04f 30ff 	mov.w	r0, #4294967295
 8001092:	f001 f9f2 	bl	800247a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001096:	4a0a      	ldr	r2, [pc, #40]	@ (80010c0 <HAL_InitTick+0x70>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	e007      	b.n	80010ae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	73fb      	strb	r3, [r7, #15]
 80010a2:	e004      	b.n	80010ae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	73fb      	strb	r3, [r7, #15]
 80010a8:	e001      	b.n	80010ae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000008 	.word	0x20000008
 80010bc:	20000000 	.word	0x20000000
 80010c0:	20000004 	.word	0x20000004

080010c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c8:	4b05      	ldr	r3, [pc, #20]	@ (80010e0 <HAL_IncTick+0x1c>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b05      	ldr	r3, [pc, #20]	@ (80010e4 <HAL_IncTick+0x20>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4413      	add	r3, r2
 80010d2:	4a03      	ldr	r2, [pc, #12]	@ (80010e0 <HAL_IncTick+0x1c>)
 80010d4:	6013      	str	r3, [r2, #0]
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	200005d8 	.word	0x200005d8
 80010e4:	20000008 	.word	0x20000008

080010e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return uwTick;
 80010ec:	4b03      	ldr	r3, [pc, #12]	@ (80010fc <HAL_GetTick+0x14>)
 80010ee:	681b      	ldr	r3, [r3, #0]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	200005d8 	.word	0x200005d8

08001100 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	431a      	orrs	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	609a      	str	r2, [r3, #8]
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	431a      	orrs	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	609a      	str	r2, [r3, #8]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800115c:	4618      	mov	r0, r3
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001168:	b480      	push	{r7}
 800116a:	b087      	sub	sp, #28
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	3360      	adds	r3, #96	@ 0x60
 800117a:	461a      	mov	r2, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <LL_ADC_SetOffset+0x44>)
 800118a:	4013      	ands	r3, r2
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	430a      	orrs	r2, r1
 8001196:	4313      	orrs	r3, r2
 8001198:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80011a0:	bf00      	nop
 80011a2:	371c      	adds	r7, #28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	03fff000 	.word	0x03fff000

080011b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	3360      	adds	r3, #96	@ 0x60
 80011be:	461a      	mov	r2, r3
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80011dc:	b480      	push	{r7}
 80011de:	b087      	sub	sp, #28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	3360      	adds	r3, #96	@ 0x60
 80011ec:	461a      	mov	r2, r3
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	431a      	orrs	r2, r3
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001206:	bf00      	nop
 8001208:	371c      	adds	r7, #28
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001212:	b480      	push	{r7}
 8001214:	b087      	sub	sp, #28
 8001216:	af00      	add	r7, sp, #0
 8001218:	60f8      	str	r0, [r7, #12]
 800121a:	60b9      	str	r1, [r7, #8]
 800121c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	3360      	adds	r3, #96	@ 0x60
 8001222:	461a      	mov	r2, r3
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	431a      	orrs	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800123c:	bf00      	nop
 800123e:	371c      	adds	r7, #28
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001248:	b480      	push	{r7}
 800124a:	b087      	sub	sp, #28
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	3360      	adds	r3, #96	@ 0x60
 8001258:	461a      	mov	r2, r3
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	431a      	orrs	r2, r3
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001272:	bf00      	nop
 8001274:	371c      	adds	r7, #28
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	695b      	ldr	r3, [r3, #20]
 800128c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	431a      	orrs	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	615a      	str	r2, [r3, #20]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b087      	sub	sp, #28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	3330      	adds	r3, #48	@ 0x30
 80012b4:	461a      	mov	r2, r3
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	f003 030c 	and.w	r3, r3, #12
 80012c0:	4413      	add	r3, r2
 80012c2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	f003 031f 	and.w	r3, r3, #31
 80012ce:	211f      	movs	r1, #31
 80012d0:	fa01 f303 	lsl.w	r3, r1, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	401a      	ands	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	0e9b      	lsrs	r3, r3, #26
 80012dc:	f003 011f 	and.w	r1, r3, #31
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	f003 031f 	and.w	r3, r3, #31
 80012e6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ea:	431a      	orrs	r2, r3
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012f0:	bf00      	nop
 80012f2:	371c      	adds	r7, #28
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b087      	sub	sp, #28
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	3314      	adds	r3, #20
 800130c:	461a      	mov	r2, r3
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	0e5b      	lsrs	r3, r3, #25
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	4413      	add	r3, r2
 800131a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	0d1b      	lsrs	r3, r3, #20
 8001324:	f003 031f 	and.w	r3, r3, #31
 8001328:	2107      	movs	r1, #7
 800132a:	fa01 f303 	lsl.w	r3, r1, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	401a      	ands	r2, r3
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	0d1b      	lsrs	r3, r3, #20
 8001336:	f003 031f 	and.w	r3, r3, #31
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	fa01 f303 	lsl.w	r3, r1, r3
 8001340:	431a      	orrs	r2, r3
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001346:	bf00      	nop
 8001348:	371c      	adds	r7, #28
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800136c:	43db      	mvns	r3, r3
 800136e:	401a      	ands	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f003 0318 	and.w	r3, r3, #24
 8001376:	4908      	ldr	r1, [pc, #32]	@ (8001398 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001378:	40d9      	lsrs	r1, r3
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	400b      	ands	r3, r1
 800137e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001382:	431a      	orrs	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800138a:	bf00      	nop
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	0007ffff 	.word	0x0007ffff

0800139c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80013ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	6093      	str	r3, [r2, #8]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80013d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80013d4:	d101      	bne.n	80013da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013d6:	2301      	movs	r3, #1
 80013d8:	e000      	b.n	80013dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80013f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013fc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001420:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001424:	d101      	bne.n	800142a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b01      	cmp	r3, #1
 800144a:	d101      	bne.n	8001450 <LL_ADC_IsEnabled+0x18>
 800144c:	2301      	movs	r3, #1
 800144e:	e000      	b.n	8001452 <LL_ADC_IsEnabled+0x1a>
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 0304 	and.w	r3, r3, #4
 800146e:	2b04      	cmp	r3, #4
 8001470:	d101      	bne.n	8001476 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001472:	2301      	movs	r3, #1
 8001474:	e000      	b.n	8001478 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f003 0308 	and.w	r3, r3, #8
 8001494:	2b08      	cmp	r3, #8
 8001496:	d101      	bne.n	800149c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001498:	2301      	movs	r3, #1
 800149a:	e000      	b.n	800149e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014ac:	b590      	push	{r4, r7, lr}
 80014ae:	b089      	sub	sp, #36	@ 0x24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014b4:	2300      	movs	r3, #0
 80014b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e1a9      	b.n	800181a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d109      	bne.n	80014e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff fab1 	bl	8000a3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff67 	bl	80013c0 <LL_ADC_IsDeepPowerDownEnabled>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d004      	beq.n	8001502 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff4d 	bl	800139c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff ff82 	bl	8001410 <LL_ADC_IsInternalRegulatorEnabled>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d115      	bne.n	800153e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff ff66 	bl	80013e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800151c:	4b9c      	ldr	r3, [pc, #624]	@ (8001790 <HAL_ADC_Init+0x2e4>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	099b      	lsrs	r3, r3, #6
 8001522:	4a9c      	ldr	r2, [pc, #624]	@ (8001794 <HAL_ADC_Init+0x2e8>)
 8001524:	fba2 2303 	umull	r2, r3, r2, r3
 8001528:	099b      	lsrs	r3, r3, #6
 800152a:	3301      	adds	r3, #1
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001530:	e002      	b.n	8001538 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	3b01      	subs	r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f9      	bne.n	8001532 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff ff64 	bl	8001410 <LL_ADC_IsInternalRegulatorEnabled>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10d      	bne.n	800156a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001552:	f043 0210 	orr.w	r2, r3, #16
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800155e:	f043 0201 	orr.w	r2, r3, #1
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff ff75 	bl	800145e <LL_ADC_REG_IsConversionOngoing>
 8001574:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800157a:	f003 0310 	and.w	r3, r3, #16
 800157e:	2b00      	cmp	r3, #0
 8001580:	f040 8142 	bne.w	8001808 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	2b00      	cmp	r3, #0
 8001588:	f040 813e 	bne.w	8001808 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001590:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001594:	f043 0202 	orr.w	r2, r3, #2
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff49 	bl	8001438 <LL_ADC_IsEnabled>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d141      	bne.n	8001630 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015b4:	d004      	beq.n	80015c0 <HAL_ADC_Init+0x114>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a77      	ldr	r2, [pc, #476]	@ (8001798 <HAL_ADC_Init+0x2ec>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d10f      	bne.n	80015e0 <HAL_ADC_Init+0x134>
 80015c0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80015c4:	f7ff ff38 	bl	8001438 <LL_ADC_IsEnabled>
 80015c8:	4604      	mov	r4, r0
 80015ca:	4873      	ldr	r0, [pc, #460]	@ (8001798 <HAL_ADC_Init+0x2ec>)
 80015cc:	f7ff ff34 	bl	8001438 <LL_ADC_IsEnabled>
 80015d0:	4603      	mov	r3, r0
 80015d2:	4323      	orrs	r3, r4
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	bf0c      	ite	eq
 80015d8:	2301      	moveq	r3, #1
 80015da:	2300      	movne	r3, #0
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	e012      	b.n	8001606 <HAL_ADC_Init+0x15a>
 80015e0:	486e      	ldr	r0, [pc, #440]	@ (800179c <HAL_ADC_Init+0x2f0>)
 80015e2:	f7ff ff29 	bl	8001438 <LL_ADC_IsEnabled>
 80015e6:	4604      	mov	r4, r0
 80015e8:	486d      	ldr	r0, [pc, #436]	@ (80017a0 <HAL_ADC_Init+0x2f4>)
 80015ea:	f7ff ff25 	bl	8001438 <LL_ADC_IsEnabled>
 80015ee:	4603      	mov	r3, r0
 80015f0:	431c      	orrs	r4, r3
 80015f2:	486c      	ldr	r0, [pc, #432]	@ (80017a4 <HAL_ADC_Init+0x2f8>)
 80015f4:	f7ff ff20 	bl	8001438 <LL_ADC_IsEnabled>
 80015f8:	4603      	mov	r3, r0
 80015fa:	4323      	orrs	r3, r4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	bf0c      	ite	eq
 8001600:	2301      	moveq	r3, #1
 8001602:	2300      	movne	r3, #0
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d012      	beq.n	8001630 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001612:	d004      	beq.n	800161e <HAL_ADC_Init+0x172>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a5f      	ldr	r2, [pc, #380]	@ (8001798 <HAL_ADC_Init+0x2ec>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d101      	bne.n	8001622 <HAL_ADC_Init+0x176>
 800161e:	4a62      	ldr	r2, [pc, #392]	@ (80017a8 <HAL_ADC_Init+0x2fc>)
 8001620:	e000      	b.n	8001624 <HAL_ADC_Init+0x178>
 8001622:	4a62      	ldr	r2, [pc, #392]	@ (80017ac <HAL_ADC_Init+0x300>)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	4619      	mov	r1, r3
 800162a:	4610      	mov	r0, r2
 800162c:	f7ff fd68 	bl	8001100 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	7f5b      	ldrb	r3, [r3, #29]
 8001634:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800163a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001640:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001646:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800164e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800165a:	2b01      	cmp	r3, #1
 800165c:	d106      	bne.n	800166c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001662:	3b01      	subs	r3, #1
 8001664:	045b      	lsls	r3, r3, #17
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001670:	2b00      	cmp	r3, #0
 8001672:	d009      	beq.n	8001688 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001678:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001680:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	68da      	ldr	r2, [r3, #12]
 800168e:	4b48      	ldr	r3, [pc, #288]	@ (80017b0 <HAL_ADC_Init+0x304>)
 8001690:	4013      	ands	r3, r2
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6812      	ldr	r2, [r2, #0]
 8001696:	69b9      	ldr	r1, [r7, #24]
 8001698:	430b      	orrs	r3, r1
 800169a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fee4 	bl	8001484 <LL_ADC_INJ_IsConversionOngoing>
 80016bc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d17f      	bne.n	80017c4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d17c      	bne.n	80017c4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016ce:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80016d6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80016e6:	f023 0302 	bic.w	r3, r3, #2
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6812      	ldr	r2, [r2, #0]
 80016ee:	69b9      	ldr	r1, [r7, #24]
 80016f0:	430b      	orrs	r3, r1
 80016f2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d017      	beq.n	800172c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	691a      	ldr	r2, [r3, #16]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800170a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001714:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001718:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6911      	ldr	r1, [r2, #16]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	430b      	orrs	r3, r1
 8001726:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800172a:	e013      	b.n	8001754 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	691a      	ldr	r2, [r3, #16]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800173a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6812      	ldr	r2, [r2, #0]
 8001748:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800174c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001750:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800175a:	2b01      	cmp	r3, #1
 800175c:	d12a      	bne.n	80017b4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001768:	f023 0304 	bic.w	r3, r3, #4
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001774:	4311      	orrs	r1, r2
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800177a:	4311      	orrs	r1, r2
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001780:	430a      	orrs	r2, r1
 8001782:	431a      	orrs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f042 0201 	orr.w	r2, r2, #1
 800178c:	611a      	str	r2, [r3, #16]
 800178e:	e019      	b.n	80017c4 <HAL_ADC_Init+0x318>
 8001790:	20000000 	.word	0x20000000
 8001794:	053e2d63 	.word	0x053e2d63
 8001798:	50000100 	.word	0x50000100
 800179c:	50000400 	.word	0x50000400
 80017a0:	50000500 	.word	0x50000500
 80017a4:	50000600 	.word	0x50000600
 80017a8:	50000300 	.word	0x50000300
 80017ac:	50000700 	.word	0x50000700
 80017b0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	691a      	ldr	r2, [r3, #16]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 0201 	bic.w	r2, r2, #1
 80017c2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d10c      	bne.n	80017e6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	f023 010f 	bic.w	r1, r3, #15
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	1e5a      	subs	r2, r3, #1
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	430a      	orrs	r2, r1
 80017e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80017e4:	e007      	b.n	80017f6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 020f 	bic.w	r2, r2, #15
 80017f4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017fa:	f023 0303 	bic.w	r3, r3, #3
 80017fe:	f043 0201 	orr.w	r2, r3, #1
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001806:	e007      	b.n	8001818 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800180c:	f043 0210 	orr.w	r2, r3, #16
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001818:	7ffb      	ldrb	r3, [r7, #31]
}
 800181a:	4618      	mov	r0, r3
 800181c:	3724      	adds	r7, #36	@ 0x24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd90      	pop	{r4, r7, pc}
 8001822:	bf00      	nop

08001824 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b0b6      	sub	sp, #216	@ 0xd8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800182e:	2300      	movs	r3, #0
 8001830:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001834:	2300      	movs	r3, #0
 8001836:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800183e:	2b01      	cmp	r3, #1
 8001840:	d102      	bne.n	8001848 <HAL_ADC_ConfigChannel+0x24>
 8001842:	2302      	movs	r3, #2
 8001844:	f000 bc13 	b.w	800206e <HAL_ADC_ConfigChannel+0x84a>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fe02 	bl	800145e <LL_ADC_REG_IsConversionOngoing>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	f040 83f3 	bne.w	8002048 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6818      	ldr	r0, [r3, #0]
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	6859      	ldr	r1, [r3, #4]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	461a      	mov	r2, r3
 8001870:	f7ff fd18 	bl	80012a4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fdf0 	bl	800145e <LL_ADC_REG_IsConversionOngoing>
 800187e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fdfc 	bl	8001484 <LL_ADC_INJ_IsConversionOngoing>
 800188c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001890:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001894:	2b00      	cmp	r3, #0
 8001896:	f040 81d9 	bne.w	8001c4c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800189a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f040 81d4 	bne.w	8001c4c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80018ac:	d10f      	bne.n	80018ce <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6818      	ldr	r0, [r3, #0]
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2200      	movs	r2, #0
 80018b8:	4619      	mov	r1, r3
 80018ba:	f7ff fd1f 	bl	80012fc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff fcd9 	bl	800127e <LL_ADC_SetSamplingTimeCommonConfig>
 80018cc:	e00e      	b.n	80018ec <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6818      	ldr	r0, [r3, #0]
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	6819      	ldr	r1, [r3, #0]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	461a      	mov	r2, r3
 80018dc:	f7ff fd0e 	bl	80012fc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2100      	movs	r1, #0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff fcc9 	bl	800127e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	695a      	ldr	r2, [r3, #20]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	08db      	lsrs	r3, r3, #3
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	2b04      	cmp	r3, #4
 800190c:	d022      	beq.n	8001954 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6818      	ldr	r0, [r3, #0]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	6919      	ldr	r1, [r3, #16]
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800191e:	f7ff fc23 	bl	8001168 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6818      	ldr	r0, [r3, #0]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	6919      	ldr	r1, [r3, #16]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	461a      	mov	r2, r3
 8001930:	f7ff fc6f 	bl	8001212 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6818      	ldr	r0, [r3, #0]
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001940:	2b01      	cmp	r3, #1
 8001942:	d102      	bne.n	800194a <HAL_ADC_ConfigChannel+0x126>
 8001944:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001948:	e000      	b.n	800194c <HAL_ADC_ConfigChannel+0x128>
 800194a:	2300      	movs	r3, #0
 800194c:	461a      	mov	r2, r3
 800194e:	f7ff fc7b 	bl	8001248 <LL_ADC_SetOffsetSaturation>
 8001952:	e17b      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2100      	movs	r1, #0
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fc28 	bl	80011b0 <LL_ADC_GetOffsetChannel>
 8001960:	4603      	mov	r3, r0
 8001962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10a      	bne.n	8001980 <HAL_ADC_ConfigChannel+0x15c>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2100      	movs	r1, #0
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fc1d 	bl	80011b0 <LL_ADC_GetOffsetChannel>
 8001976:	4603      	mov	r3, r0
 8001978:	0e9b      	lsrs	r3, r3, #26
 800197a:	f003 021f 	and.w	r2, r3, #31
 800197e:	e01e      	b.n	80019be <HAL_ADC_ConfigChannel+0x19a>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2100      	movs	r1, #0
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fc12 	bl	80011b0 <LL_ADC_GetOffsetChannel>
 800198c:	4603      	mov	r3, r0
 800198e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001996:	fa93 f3a3 	rbit	r3, r3
 800199a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800199e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80019a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80019a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80019ae:	2320      	movs	r3, #32
 80019b0:	e004      	b.n	80019bc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80019b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80019b6:	fab3 f383 	clz	r3, r3
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d105      	bne.n	80019d6 <HAL_ADC_ConfigChannel+0x1b2>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	0e9b      	lsrs	r3, r3, #26
 80019d0:	f003 031f 	and.w	r3, r3, #31
 80019d4:	e018      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x1e4>
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80019e2:	fa93 f3a3 	rbit	r3, r3
 80019e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80019ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80019ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80019f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80019fa:	2320      	movs	r3, #32
 80019fc:	e004      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80019fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001a02:	fab3 f383 	clz	r3, r3
 8001a06:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d106      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2200      	movs	r2, #0
 8001a12:	2100      	movs	r1, #0
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff fbe1 	bl	80011dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2101      	movs	r1, #1
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fbc5 	bl	80011b0 <LL_ADC_GetOffsetChannel>
 8001a26:	4603      	mov	r3, r0
 8001a28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10a      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x222>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2101      	movs	r1, #1
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fbba 	bl	80011b0 <LL_ADC_GetOffsetChannel>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	0e9b      	lsrs	r3, r3, #26
 8001a40:	f003 021f 	and.w	r2, r3, #31
 8001a44:	e01e      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x260>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff fbaf 	bl	80011b0 <LL_ADC_GetOffsetChannel>
 8001a52:	4603      	mov	r3, r0
 8001a54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001a5c:	fa93 f3a3 	rbit	r3, r3
 8001a60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001a64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001a68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001a6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001a74:	2320      	movs	r3, #32
 8001a76:	e004      	b.n	8001a82 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001a78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a7c:	fab3 f383 	clz	r3, r3
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d105      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x278>
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	0e9b      	lsrs	r3, r3, #26
 8001a96:	f003 031f 	and.w	r3, r3, #31
 8001a9a:	e018      	b.n	8001ace <HAL_ADC_ConfigChannel+0x2aa>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001aa8:	fa93 f3a3 	rbit	r3, r3
 8001aac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001ab0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001ab4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001ab8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001ac0:	2320      	movs	r3, #32
 8001ac2:	e004      	b.n	8001ace <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001ac4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ac8:	fab3 f383 	clz	r3, r3
 8001acc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d106      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2101      	movs	r1, #1
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fb7e 	bl	80011dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2102      	movs	r1, #2
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fb62 	bl	80011b0 <LL_ADC_GetOffsetChannel>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10a      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x2e8>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2102      	movs	r1, #2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fb57 	bl	80011b0 <LL_ADC_GetOffsetChannel>
 8001b02:	4603      	mov	r3, r0
 8001b04:	0e9b      	lsrs	r3, r3, #26
 8001b06:	f003 021f 	and.w	r2, r3, #31
 8001b0a:	e01e      	b.n	8001b4a <HAL_ADC_ConfigChannel+0x326>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2102      	movs	r1, #2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fb4c 	bl	80011b0 <LL_ADC_GetOffsetChannel>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b22:	fa93 f3a3 	rbit	r3, r3
 8001b26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001b2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001b32:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001b3a:	2320      	movs	r3, #32
 8001b3c:	e004      	b.n	8001b48 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001b3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001b42:	fab3 f383 	clz	r3, r3
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d105      	bne.n	8001b62 <HAL_ADC_ConfigChannel+0x33e>
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	0e9b      	lsrs	r3, r3, #26
 8001b5c:	f003 031f 	and.w	r3, r3, #31
 8001b60:	e016      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x36c>
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b6e:	fa93 f3a3 	rbit	r3, r3
 8001b72:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001b74:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001b76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001b7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001b82:	2320      	movs	r3, #32
 8001b84:	e004      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001b86:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001b8a:	fab3 f383 	clz	r3, r3
 8001b8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d106      	bne.n	8001ba2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2102      	movs	r1, #2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fb1d 	bl	80011dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2103      	movs	r1, #3
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff fb01 	bl	80011b0 <LL_ADC_GetOffsetChannel>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10a      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x3aa>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2103      	movs	r1, #3
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff faf6 	bl	80011b0 <LL_ADC_GetOffsetChannel>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	0e9b      	lsrs	r3, r3, #26
 8001bc8:	f003 021f 	and.w	r2, r3, #31
 8001bcc:	e017      	b.n	8001bfe <HAL_ADC_ConfigChannel+0x3da>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2103      	movs	r1, #3
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff faeb 	bl	80011b0 <LL_ADC_GetOffsetChannel>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001be0:	fa93 f3a3 	rbit	r3, r3
 8001be4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001be6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001be8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001bea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001bf0:	2320      	movs	r3, #32
 8001bf2:	e003      	b.n	8001bfc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001bf4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001bf6:	fab3 f383 	clz	r3, r3
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d105      	bne.n	8001c16 <HAL_ADC_ConfigChannel+0x3f2>
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	0e9b      	lsrs	r3, r3, #26
 8001c10:	f003 031f 	and.w	r3, r3, #31
 8001c14:	e011      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x416>
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c1e:	fa93 f3a3 	rbit	r3, r3
 8001c22:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001c24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c26:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001c28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001c2e:	2320      	movs	r3, #32
 8001c30:	e003      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001c32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c34:	fab3 f383 	clz	r3, r3
 8001c38:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d106      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2200      	movs	r2, #0
 8001c44:	2103      	movs	r1, #3
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fac8 	bl	80011dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fbf1 	bl	8001438 <LL_ADC_IsEnabled>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f040 813d 	bne.w	8001ed8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6818      	ldr	r0, [r3, #0]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	6819      	ldr	r1, [r3, #0]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	f7ff fb72 	bl	8001354 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	4aa2      	ldr	r2, [pc, #648]	@ (8001f00 <HAL_ADC_ConfigChannel+0x6dc>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	f040 812e 	bne.w	8001ed8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10b      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x480>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	0e9b      	lsrs	r3, r3, #26
 8001c92:	3301      	adds	r3, #1
 8001c94:	f003 031f 	and.w	r3, r3, #31
 8001c98:	2b09      	cmp	r3, #9
 8001c9a:	bf94      	ite	ls
 8001c9c:	2301      	movls	r3, #1
 8001c9e:	2300      	movhi	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	e019      	b.n	8001cd8 <HAL_ADC_ConfigChannel+0x4b4>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001caa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001cac:	fa93 f3a3 	rbit	r3, r3
 8001cb0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001cb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001cb4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001cb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001cbc:	2320      	movs	r3, #32
 8001cbe:	e003      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001cc0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001cc2:	fab3 f383 	clz	r3, r3
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	3301      	adds	r3, #1
 8001cca:	f003 031f 	and.w	r3, r3, #31
 8001cce:	2b09      	cmp	r3, #9
 8001cd0:	bf94      	ite	ls
 8001cd2:	2301      	movls	r3, #1
 8001cd4:	2300      	movhi	r3, #0
 8001cd6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d079      	beq.n	8001dd0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d107      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x4d4>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	0e9b      	lsrs	r3, r3, #26
 8001cee:	3301      	adds	r3, #1
 8001cf0:	069b      	lsls	r3, r3, #26
 8001cf2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001cf6:	e015      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x500>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d00:	fa93 f3a3 	rbit	r3, r3
 8001d04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001d06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d08:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001d0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001d10:	2320      	movs	r3, #32
 8001d12:	e003      	b.n	8001d1c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001d14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d16:	fab3 f383 	clz	r3, r3
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	069b      	lsls	r3, r3, #26
 8001d20:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d109      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x520>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	0e9b      	lsrs	r3, r3, #26
 8001d36:	3301      	adds	r3, #1
 8001d38:	f003 031f 	and.w	r3, r3, #31
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d42:	e017      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x550>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d4c:	fa93 f3a3 	rbit	r3, r3
 8001d50:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001d52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d54:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001d56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001d5c:	2320      	movs	r3, #32
 8001d5e:	e003      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001d60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d62:	fab3 f383 	clz	r3, r3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	3301      	adds	r3, #1
 8001d6a:	f003 031f 	and.w	r3, r3, #31
 8001d6e:	2101      	movs	r1, #1
 8001d70:	fa01 f303 	lsl.w	r3, r1, r3
 8001d74:	ea42 0103 	orr.w	r1, r2, r3
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10a      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x576>
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	0e9b      	lsrs	r3, r3, #26
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	f003 021f 	and.w	r2, r3, #31
 8001d90:	4613      	mov	r3, r2
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	4413      	add	r3, r2
 8001d96:	051b      	lsls	r3, r3, #20
 8001d98:	e018      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x5a8>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001da2:	fa93 f3a3 	rbit	r3, r3
 8001da6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001dac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001db2:	2320      	movs	r3, #32
 8001db4:	e003      	b.n	8001dbe <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001db8:	fab3 f383 	clz	r3, r3
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	f003 021f 	and.w	r2, r3, #31
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	4413      	add	r3, r2
 8001dca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dcc:	430b      	orrs	r3, r1
 8001dce:	e07e      	b.n	8001ece <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d107      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x5c8>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	0e9b      	lsrs	r3, r3, #26
 8001de2:	3301      	adds	r3, #1
 8001de4:	069b      	lsls	r3, r3, #26
 8001de6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001dea:	e015      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x5f4>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001df4:	fa93 f3a3 	rbit	r3, r3
 8001df8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dfc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001e04:	2320      	movs	r3, #32
 8001e06:	e003      	b.n	8001e10 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e0a:	fab3 f383 	clz	r3, r3
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	3301      	adds	r3, #1
 8001e12:	069b      	lsls	r3, r3, #26
 8001e14:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d109      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x614>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	0e9b      	lsrs	r3, r3, #26
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	f003 031f 	and.w	r3, r3, #31
 8001e30:	2101      	movs	r1, #1
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	e017      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x644>
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3e:	6a3b      	ldr	r3, [r7, #32]
 8001e40:	fa93 f3a3 	rbit	r3, r3
 8001e44:	61fb      	str	r3, [r7, #28]
  return result;
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001e50:	2320      	movs	r3, #32
 8001e52:	e003      	b.n	8001e5c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e56:	fab3 f383 	clz	r3, r3
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	f003 031f 	and.w	r3, r3, #31
 8001e62:	2101      	movs	r1, #1
 8001e64:	fa01 f303 	lsl.w	r3, r1, r3
 8001e68:	ea42 0103 	orr.w	r1, r2, r3
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d10d      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x670>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	0e9b      	lsrs	r3, r3, #26
 8001e7e:	3301      	adds	r3, #1
 8001e80:	f003 021f 	and.w	r2, r3, #31
 8001e84:	4613      	mov	r3, r2
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	4413      	add	r3, r2
 8001e8a:	3b1e      	subs	r3, #30
 8001e8c:	051b      	lsls	r3, r3, #20
 8001e8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e92:	e01b      	b.n	8001ecc <HAL_ADC_ConfigChannel+0x6a8>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	fa93 f3a3 	rbit	r3, r3
 8001ea0:	613b      	str	r3, [r7, #16]
  return result;
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001eac:	2320      	movs	r3, #32
 8001eae:	e003      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	fab3 f383 	clz	r3, r3
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	3301      	adds	r3, #1
 8001eba:	f003 021f 	and.w	r2, r3, #31
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	4413      	add	r3, r2
 8001ec4:	3b1e      	subs	r3, #30
 8001ec6:	051b      	lsls	r3, r3, #20
 8001ec8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ecc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	f7ff fa12 	bl	80012fc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4b09      	ldr	r3, [pc, #36]	@ (8001f04 <HAL_ADC_ConfigChannel+0x6e0>)
 8001ede:	4013      	ands	r3, r2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 80be 	beq.w	8002062 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001eee:	d004      	beq.n	8001efa <HAL_ADC_ConfigChannel+0x6d6>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a04      	ldr	r2, [pc, #16]	@ (8001f08 <HAL_ADC_ConfigChannel+0x6e4>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d10a      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x6ec>
 8001efa:	4b04      	ldr	r3, [pc, #16]	@ (8001f0c <HAL_ADC_ConfigChannel+0x6e8>)
 8001efc:	e009      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x6ee>
 8001efe:	bf00      	nop
 8001f00:	407f0000 	.word	0x407f0000
 8001f04:	80080000 	.word	0x80080000
 8001f08:	50000100 	.word	0x50000100
 8001f0c:	50000300 	.word	0x50000300
 8001f10:	4b59      	ldr	r3, [pc, #356]	@ (8002078 <HAL_ADC_ConfigChannel+0x854>)
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff f91a 	bl	800114c <LL_ADC_GetCommonPathInternalCh>
 8001f18:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a56      	ldr	r2, [pc, #344]	@ (800207c <HAL_ADC_ConfigChannel+0x858>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d004      	beq.n	8001f30 <HAL_ADC_ConfigChannel+0x70c>
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a55      	ldr	r2, [pc, #340]	@ (8002080 <HAL_ADC_ConfigChannel+0x85c>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d13a      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d134      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f44:	d005      	beq.n	8001f52 <HAL_ADC_ConfigChannel+0x72e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a4e      	ldr	r2, [pc, #312]	@ (8002084 <HAL_ADC_ConfigChannel+0x860>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	f040 8085 	bne.w	800205c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f5a:	d004      	beq.n	8001f66 <HAL_ADC_ConfigChannel+0x742>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a49      	ldr	r2, [pc, #292]	@ (8002088 <HAL_ADC_ConfigChannel+0x864>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d101      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x746>
 8001f66:	4a49      	ldr	r2, [pc, #292]	@ (800208c <HAL_ADC_ConfigChannel+0x868>)
 8001f68:	e000      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x748>
 8001f6a:	4a43      	ldr	r2, [pc, #268]	@ (8002078 <HAL_ADC_ConfigChannel+0x854>)
 8001f6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f70:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f74:	4619      	mov	r1, r3
 8001f76:	4610      	mov	r0, r2
 8001f78:	f7ff f8d5 	bl	8001126 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f7c:	4b44      	ldr	r3, [pc, #272]	@ (8002090 <HAL_ADC_ConfigChannel+0x86c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	099b      	lsrs	r3, r3, #6
 8001f82:	4a44      	ldr	r2, [pc, #272]	@ (8002094 <HAL_ADC_ConfigChannel+0x870>)
 8001f84:	fba2 2303 	umull	r2, r3, r2, r3
 8001f88:	099b      	lsrs	r3, r3, #6
 8001f8a:	1c5a      	adds	r2, r3, #1
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4413      	add	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f96:	e002      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1f9      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fa4:	e05a      	b.n	800205c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a3b      	ldr	r2, [pc, #236]	@ (8002098 <HAL_ADC_ConfigChannel+0x874>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d125      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001fb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001fb4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d11f      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a31      	ldr	r2, [pc, #196]	@ (8002088 <HAL_ADC_ConfigChannel+0x864>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d104      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x7ac>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a34      	ldr	r2, [pc, #208]	@ (800209c <HAL_ADC_ConfigChannel+0x878>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d047      	beq.n	8002060 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fd8:	d004      	beq.n	8001fe4 <HAL_ADC_ConfigChannel+0x7c0>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a2a      	ldr	r2, [pc, #168]	@ (8002088 <HAL_ADC_ConfigChannel+0x864>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d101      	bne.n	8001fe8 <HAL_ADC_ConfigChannel+0x7c4>
 8001fe4:	4a29      	ldr	r2, [pc, #164]	@ (800208c <HAL_ADC_ConfigChannel+0x868>)
 8001fe6:	e000      	b.n	8001fea <HAL_ADC_ConfigChannel+0x7c6>
 8001fe8:	4a23      	ldr	r2, [pc, #140]	@ (8002078 <HAL_ADC_ConfigChannel+0x854>)
 8001fea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001fee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	f7ff f896 	bl	8001126 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ffa:	e031      	b.n	8002060 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a27      	ldr	r2, [pc, #156]	@ (80020a0 <HAL_ADC_ConfigChannel+0x87c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d12d      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002006:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800200a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d127      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a1c      	ldr	r2, [pc, #112]	@ (8002088 <HAL_ADC_ConfigChannel+0x864>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d022      	beq.n	8002062 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002024:	d004      	beq.n	8002030 <HAL_ADC_ConfigChannel+0x80c>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a17      	ldr	r2, [pc, #92]	@ (8002088 <HAL_ADC_ConfigChannel+0x864>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d101      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x810>
 8002030:	4a16      	ldr	r2, [pc, #88]	@ (800208c <HAL_ADC_ConfigChannel+0x868>)
 8002032:	e000      	b.n	8002036 <HAL_ADC_ConfigChannel+0x812>
 8002034:	4a10      	ldr	r2, [pc, #64]	@ (8002078 <HAL_ADC_ConfigChannel+0x854>)
 8002036:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800203a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800203e:	4619      	mov	r1, r3
 8002040:	4610      	mov	r0, r2
 8002042:	f7ff f870 	bl	8001126 <LL_ADC_SetCommonPathInternalCh>
 8002046:	e00c      	b.n	8002062 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800204c:	f043 0220 	orr.w	r2, r3, #32
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800205a:	e002      	b.n	8002062 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800205c:	bf00      	nop
 800205e:	e000      	b.n	8002062 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002060:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800206a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800206e:	4618      	mov	r0, r3
 8002070:	37d8      	adds	r7, #216	@ 0xd8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	50000700 	.word	0x50000700
 800207c:	c3210000 	.word	0xc3210000
 8002080:	90c00010 	.word	0x90c00010
 8002084:	50000600 	.word	0x50000600
 8002088:	50000100 	.word	0x50000100
 800208c:	50000300 	.word	0x50000300
 8002090:	20000000 	.word	0x20000000
 8002094:	053e2d63 	.word	0x053e2d63
 8002098:	c7520000 	.word	0xc7520000
 800209c:	50000500 	.word	0x50000500
 80020a0:	cb840000 	.word	0xcb840000

080020a4 <LL_ADC_IsEnabled>:
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <LL_ADC_IsEnabled+0x18>
 80020b8:	2301      	movs	r3, #1
 80020ba:	e000      	b.n	80020be <LL_ADC_IsEnabled+0x1a>
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <LL_ADC_REG_IsConversionOngoing>:
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 0304 	and.w	r3, r3, #4
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d101      	bne.n	80020e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020de:	2301      	movs	r3, #1
 80020e0:	e000      	b.n	80020e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80020f0:	b590      	push	{r4, r7, lr}
 80020f2:	b0a1      	sub	sp, #132	@ 0x84
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002106:	2b01      	cmp	r3, #1
 8002108:	d101      	bne.n	800210e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800210a:	2302      	movs	r3, #2
 800210c:	e0e7      	b.n	80022de <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002116:	2300      	movs	r3, #0
 8002118:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800211a:	2300      	movs	r3, #0
 800211c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002126:	d102      	bne.n	800212e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002128:	4b6f      	ldr	r3, [pc, #444]	@ (80022e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	e009      	b.n	8002142 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a6e      	ldr	r2, [pc, #440]	@ (80022ec <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d102      	bne.n	800213e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002138:	4b6d      	ldr	r3, [pc, #436]	@ (80022f0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800213a:	60bb      	str	r3, [r7, #8]
 800213c:	e001      	b.n	8002142 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800213e:	2300      	movs	r3, #0
 8002140:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10b      	bne.n	8002160 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800214c:	f043 0220 	orr.w	r2, r3, #32
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e0be      	b.n	80022de <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff ffb1 	bl	80020ca <LL_ADC_REG_IsConversionOngoing>
 8002168:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff ffab 	bl	80020ca <LL_ADC_REG_IsConversionOngoing>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	f040 80a0 	bne.w	80022bc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800217c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800217e:	2b00      	cmp	r3, #0
 8002180:	f040 809c 	bne.w	80022bc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800218c:	d004      	beq.n	8002198 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a55      	ldr	r2, [pc, #340]	@ (80022e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d101      	bne.n	800219c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002198:	4b56      	ldr	r3, [pc, #344]	@ (80022f4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800219a:	e000      	b.n	800219e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800219c:	4b56      	ldr	r3, [pc, #344]	@ (80022f8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800219e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d04b      	beq.n	8002240 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80021a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	6859      	ldr	r1, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80021ba:	035b      	lsls	r3, r3, #13
 80021bc:	430b      	orrs	r3, r1
 80021be:	431a      	orrs	r2, r3
 80021c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021c2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021cc:	d004      	beq.n	80021d8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a45      	ldr	r2, [pc, #276]	@ (80022e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d10f      	bne.n	80021f8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80021d8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80021dc:	f7ff ff62 	bl	80020a4 <LL_ADC_IsEnabled>
 80021e0:	4604      	mov	r4, r0
 80021e2:	4841      	ldr	r0, [pc, #260]	@ (80022e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80021e4:	f7ff ff5e 	bl	80020a4 <LL_ADC_IsEnabled>
 80021e8:	4603      	mov	r3, r0
 80021ea:	4323      	orrs	r3, r4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	bf0c      	ite	eq
 80021f0:	2301      	moveq	r3, #1
 80021f2:	2300      	movne	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	e012      	b.n	800221e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80021f8:	483c      	ldr	r0, [pc, #240]	@ (80022ec <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80021fa:	f7ff ff53 	bl	80020a4 <LL_ADC_IsEnabled>
 80021fe:	4604      	mov	r4, r0
 8002200:	483b      	ldr	r0, [pc, #236]	@ (80022f0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002202:	f7ff ff4f 	bl	80020a4 <LL_ADC_IsEnabled>
 8002206:	4603      	mov	r3, r0
 8002208:	431c      	orrs	r4, r3
 800220a:	483c      	ldr	r0, [pc, #240]	@ (80022fc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800220c:	f7ff ff4a 	bl	80020a4 <LL_ADC_IsEnabled>
 8002210:	4603      	mov	r3, r0
 8002212:	4323      	orrs	r3, r4
 8002214:	2b00      	cmp	r3, #0
 8002216:	bf0c      	ite	eq
 8002218:	2301      	moveq	r3, #1
 800221a:	2300      	movne	r3, #0
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d056      	beq.n	80022d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002222:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800222a:	f023 030f 	bic.w	r3, r3, #15
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	6811      	ldr	r1, [r2, #0]
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	6892      	ldr	r2, [r2, #8]
 8002236:	430a      	orrs	r2, r1
 8002238:	431a      	orrs	r2, r3
 800223a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800223c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800223e:	e047      	b.n	80022d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002240:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002248:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800224a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002254:	d004      	beq.n	8002260 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a23      	ldr	r2, [pc, #140]	@ (80022e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d10f      	bne.n	8002280 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002260:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002264:	f7ff ff1e 	bl	80020a4 <LL_ADC_IsEnabled>
 8002268:	4604      	mov	r4, r0
 800226a:	481f      	ldr	r0, [pc, #124]	@ (80022e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800226c:	f7ff ff1a 	bl	80020a4 <LL_ADC_IsEnabled>
 8002270:	4603      	mov	r3, r0
 8002272:	4323      	orrs	r3, r4
 8002274:	2b00      	cmp	r3, #0
 8002276:	bf0c      	ite	eq
 8002278:	2301      	moveq	r3, #1
 800227a:	2300      	movne	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	e012      	b.n	80022a6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002280:	481a      	ldr	r0, [pc, #104]	@ (80022ec <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002282:	f7ff ff0f 	bl	80020a4 <LL_ADC_IsEnabled>
 8002286:	4604      	mov	r4, r0
 8002288:	4819      	ldr	r0, [pc, #100]	@ (80022f0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800228a:	f7ff ff0b 	bl	80020a4 <LL_ADC_IsEnabled>
 800228e:	4603      	mov	r3, r0
 8002290:	431c      	orrs	r4, r3
 8002292:	481a      	ldr	r0, [pc, #104]	@ (80022fc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002294:	f7ff ff06 	bl	80020a4 <LL_ADC_IsEnabled>
 8002298:	4603      	mov	r3, r0
 800229a:	4323      	orrs	r3, r4
 800229c:	2b00      	cmp	r3, #0
 800229e:	bf0c      	ite	eq
 80022a0:	2301      	moveq	r3, #1
 80022a2:	2300      	movne	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d012      	beq.n	80022d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80022aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80022b2:	f023 030f 	bic.w	r3, r3, #15
 80022b6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80022b8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80022ba:	e009      	b.n	80022d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c0:	f043 0220 	orr.w	r2, r3, #32
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80022ce:	e000      	b.n	80022d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80022d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80022da:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3784      	adds	r7, #132	@ 0x84
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd90      	pop	{r4, r7, pc}
 80022e6:	bf00      	nop
 80022e8:	50000100 	.word	0x50000100
 80022ec:	50000400 	.word	0x50000400
 80022f0:	50000500 	.word	0x50000500
 80022f4:	50000300 	.word	0x50000300
 80022f8:	50000700 	.word	0x50000700
 80022fc:	50000600 	.word	0x50000600

08002300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002310:	4b0c      	ldr	r3, [pc, #48]	@ (8002344 <__NVIC_SetPriorityGrouping+0x44>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800231c:	4013      	ands	r3, r2
 800231e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002328:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800232c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002332:	4a04      	ldr	r2, [pc, #16]	@ (8002344 <__NVIC_SetPriorityGrouping+0x44>)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	60d3      	str	r3, [r2, #12]
}
 8002338:	bf00      	nop
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800234c:	4b04      	ldr	r3, [pc, #16]	@ (8002360 <__NVIC_GetPriorityGrouping+0x18>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	0a1b      	lsrs	r3, r3, #8
 8002352:	f003 0307 	and.w	r3, r3, #7
}
 8002356:	4618      	mov	r0, r3
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	6039      	str	r1, [r7, #0]
 800236e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002374:	2b00      	cmp	r3, #0
 8002376:	db0a      	blt.n	800238e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	b2da      	uxtb	r2, r3
 800237c:	490c      	ldr	r1, [pc, #48]	@ (80023b0 <__NVIC_SetPriority+0x4c>)
 800237e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002382:	0112      	lsls	r2, r2, #4
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	440b      	add	r3, r1
 8002388:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800238c:	e00a      	b.n	80023a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	b2da      	uxtb	r2, r3
 8002392:	4908      	ldr	r1, [pc, #32]	@ (80023b4 <__NVIC_SetPriority+0x50>)
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	3b04      	subs	r3, #4
 800239c:	0112      	lsls	r2, r2, #4
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	440b      	add	r3, r1
 80023a2:	761a      	strb	r2, [r3, #24]
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	e000e100 	.word	0xe000e100
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b089      	sub	sp, #36	@ 0x24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f1c3 0307 	rsb	r3, r3, #7
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	bf28      	it	cs
 80023d6:	2304      	movcs	r3, #4
 80023d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3304      	adds	r3, #4
 80023de:	2b06      	cmp	r3, #6
 80023e0:	d902      	bls.n	80023e8 <NVIC_EncodePriority+0x30>
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3b03      	subs	r3, #3
 80023e6:	e000      	b.n	80023ea <NVIC_EncodePriority+0x32>
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ec:	f04f 32ff 	mov.w	r2, #4294967295
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43da      	mvns	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	401a      	ands	r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002400:	f04f 31ff 	mov.w	r1, #4294967295
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	fa01 f303 	lsl.w	r3, r1, r3
 800240a:	43d9      	mvns	r1, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002410:	4313      	orrs	r3, r2
         );
}
 8002412:	4618      	mov	r0, r3
 8002414:	3724      	adds	r7, #36	@ 0x24
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3b01      	subs	r3, #1
 800242c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002430:	d301      	bcc.n	8002436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002432:	2301      	movs	r3, #1
 8002434:	e00f      	b.n	8002456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002436:	4a0a      	ldr	r2, [pc, #40]	@ (8002460 <SysTick_Config+0x40>)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3b01      	subs	r3, #1
 800243c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800243e:	210f      	movs	r1, #15
 8002440:	f04f 30ff 	mov.w	r0, #4294967295
 8002444:	f7ff ff8e 	bl	8002364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002448:	4b05      	ldr	r3, [pc, #20]	@ (8002460 <SysTick_Config+0x40>)
 800244a:	2200      	movs	r2, #0
 800244c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800244e:	4b04      	ldr	r3, [pc, #16]	@ (8002460 <SysTick_Config+0x40>)
 8002450:	2207      	movs	r2, #7
 8002452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	e000e010 	.word	0xe000e010

08002464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff ff47 	bl	8002300 <__NVIC_SetPriorityGrouping>
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b086      	sub	sp, #24
 800247e:	af00      	add	r7, sp, #0
 8002480:	4603      	mov	r3, r0
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
 8002486:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002488:	f7ff ff5e 	bl	8002348 <__NVIC_GetPriorityGrouping>
 800248c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	68b9      	ldr	r1, [r7, #8]
 8002492:	6978      	ldr	r0, [r7, #20]
 8002494:	f7ff ff90 	bl	80023b8 <NVIC_EncodePriority>
 8002498:	4602      	mov	r2, r0
 800249a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800249e:	4611      	mov	r1, r2
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff ff5f 	bl	8002364 <__NVIC_SetPriority>
}
 80024a6:	bf00      	nop
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff ffb2 	bl	8002420 <SysTick_Config>
 80024bc:	4603      	mov	r3, r0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e147      	b.n	800276a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d106      	bne.n	80024f4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7fe fc00 	bl	8000cf4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	699a      	ldr	r2, [r3, #24]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0210 	bic.w	r2, r2, #16
 8002502:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002504:	f7fe fdf0 	bl	80010e8 <HAL_GetTick>
 8002508:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800250a:	e012      	b.n	8002532 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800250c:	f7fe fdec 	bl	80010e8 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b0a      	cmp	r3, #10
 8002518:	d90b      	bls.n	8002532 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800251e:	f043 0201 	orr.w	r2, r3, #1
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2203      	movs	r2, #3
 800252a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e11b      	b.n	800276a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	f003 0308 	and.w	r3, r3, #8
 800253c:	2b08      	cmp	r3, #8
 800253e:	d0e5      	beq.n	800250c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	699a      	ldr	r2, [r3, #24]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002550:	f7fe fdca 	bl	80010e8 <HAL_GetTick>
 8002554:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002556:	e012      	b.n	800257e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002558:	f7fe fdc6 	bl	80010e8 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b0a      	cmp	r3, #10
 8002564:	d90b      	bls.n	800257e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800256a:	f043 0201 	orr.w	r2, r3, #1
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2203      	movs	r2, #3
 8002576:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e0f5      	b.n	800276a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0e5      	beq.n	8002558 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	699a      	ldr	r2, [r3, #24]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0202 	orr.w	r2, r2, #2
 800259a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a74      	ldr	r2, [pc, #464]	@ (8002774 <HAL_FDCAN_Init+0x2ac>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d103      	bne.n	80025ae <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80025a6:	4a74      	ldr	r2, [pc, #464]	@ (8002778 <HAL_FDCAN_Init+0x2b0>)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	7c1b      	ldrb	r3, [r3, #16]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d108      	bne.n	80025c8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	699a      	ldr	r2, [r3, #24]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025c4:	619a      	str	r2, [r3, #24]
 80025c6:	e007      	b.n	80025d8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	699a      	ldr	r2, [r3, #24]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025d6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	7c5b      	ldrb	r3, [r3, #17]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d108      	bne.n	80025f2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	699a      	ldr	r2, [r3, #24]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80025ee:	619a      	str	r2, [r3, #24]
 80025f0:	e007      	b.n	8002602 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	699a      	ldr	r2, [r3, #24]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002600:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	7c9b      	ldrb	r3, [r3, #18]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d108      	bne.n	800261c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	699a      	ldr	r2, [r3, #24]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002618:	619a      	str	r2, [r3, #24]
 800261a:	e007      	b.n	800262c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	699a      	ldr	r2, [r3, #24]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800262a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	699a      	ldr	r2, [r3, #24]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002650:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0210 	bic.w	r2, r2, #16
 8002660:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d108      	bne.n	800267c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	699a      	ldr	r2, [r3, #24]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f042 0204 	orr.w	r2, r2, #4
 8002678:	619a      	str	r2, [r3, #24]
 800267a:	e02c      	b.n	80026d6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d028      	beq.n	80026d6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	2b02      	cmp	r3, #2
 800268a:	d01c      	beq.n	80026c6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699a      	ldr	r2, [r3, #24]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800269a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	691a      	ldr	r2, [r3, #16]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0210 	orr.w	r2, r2, #16
 80026aa:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	2b03      	cmp	r3, #3
 80026b2:	d110      	bne.n	80026d6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699a      	ldr	r2, [r3, #24]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 0220 	orr.w	r2, r2, #32
 80026c2:	619a      	str	r2, [r3, #24]
 80026c4:	e007      	b.n	80026d6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	699a      	ldr	r2, [r3, #24]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f042 0220 	orr.w	r2, r2, #32
 80026d4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	3b01      	subs	r3, #1
 80026dc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80026e6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80026ee:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80026fe:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002700:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800270a:	d115      	bne.n	8002738 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002710:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002716:	3b01      	subs	r3, #1
 8002718:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800271a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002720:	3b01      	subs	r3, #1
 8002722:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002724:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272c:	3b01      	subs	r3, #1
 800272e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002734:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002736:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f814 	bl	800277c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40006400 	.word	0x40006400
 8002778:	40006500 	.word	0x40006500

0800277c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002784:	4b30      	ldr	r3, [pc, #192]	@ (8002848 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8002786:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a2f      	ldr	r2, [pc, #188]	@ (800284c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d103      	bne.n	800279a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002798:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a2c      	ldr	r2, [pc, #176]	@ (8002850 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d103      	bne.n	80027ac <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 80027aa:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027ba:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027c2:	041a      	lsls	r2, r3, #16
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027e0:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e8:	061a      	lsls	r2, r3, #24
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	e005      	b.n	800282e <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	3304      	adds	r3, #4
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	429a      	cmp	r2, r3
 8002838:	d3f3      	bcc.n	8002822 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800283a:	bf00      	nop
 800283c:	bf00      	nop
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	4000a400 	.word	0x4000a400
 800284c:	40006800 	.word	0x40006800
 8002850:	40006c00 	.word	0x40006c00

08002854 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002854:	b480      	push	{r7}
 8002856:	b087      	sub	sp, #28
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800285e:	2300      	movs	r3, #0
 8002860:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002862:	e15a      	b.n	8002b1a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	2101      	movs	r1, #1
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	fa01 f303 	lsl.w	r3, r1, r3
 8002870:	4013      	ands	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 814c 	beq.w	8002b14 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	2b01      	cmp	r3, #1
 8002886:	d005      	beq.n	8002894 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002890:	2b02      	cmp	r3, #2
 8002892:	d130      	bne.n	80028f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	2203      	movs	r2, #3
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	43db      	mvns	r3, r3
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	4013      	ands	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	68da      	ldr	r2, [r3, #12]
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028ca:	2201      	movs	r2, #1
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43db      	mvns	r3, r3
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4013      	ands	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	091b      	lsrs	r3, r3, #4
 80028e0:	f003 0201 	and.w	r2, r3, #1
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	2b03      	cmp	r3, #3
 8002900:	d017      	beq.n	8002932 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	2203      	movs	r2, #3
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43db      	mvns	r3, r3
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	4013      	ands	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d123      	bne.n	8002986 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	08da      	lsrs	r2, r3, #3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3208      	adds	r2, #8
 8002946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800294a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	220f      	movs	r2, #15
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	43db      	mvns	r3, r3
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	4013      	ands	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	691a      	ldr	r2, [r3, #16]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	08da      	lsrs	r2, r3, #3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3208      	adds	r2, #8
 8002980:	6939      	ldr	r1, [r7, #16]
 8002982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	2203      	movs	r2, #3
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	43db      	mvns	r3, r3
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	4013      	ands	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f003 0203 	and.w	r2, r3, #3
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 80a6 	beq.w	8002b14 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029c8:	4b5b      	ldr	r3, [pc, #364]	@ (8002b38 <HAL_GPIO_Init+0x2e4>)
 80029ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029cc:	4a5a      	ldr	r2, [pc, #360]	@ (8002b38 <HAL_GPIO_Init+0x2e4>)
 80029ce:	f043 0301 	orr.w	r3, r3, #1
 80029d2:	6613      	str	r3, [r2, #96]	@ 0x60
 80029d4:	4b58      	ldr	r3, [pc, #352]	@ (8002b38 <HAL_GPIO_Init+0x2e4>)
 80029d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029e0:	4a56      	ldr	r2, [pc, #344]	@ (8002b3c <HAL_GPIO_Init+0x2e8>)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	089b      	lsrs	r3, r3, #2
 80029e6:	3302      	adds	r3, #2
 80029e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f003 0303 	and.w	r3, r3, #3
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	220f      	movs	r2, #15
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	43db      	mvns	r3, r3
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4013      	ands	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a0a:	d01f      	beq.n	8002a4c <HAL_GPIO_Init+0x1f8>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a4c      	ldr	r2, [pc, #304]	@ (8002b40 <HAL_GPIO_Init+0x2ec>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d019      	beq.n	8002a48 <HAL_GPIO_Init+0x1f4>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a4b      	ldr	r2, [pc, #300]	@ (8002b44 <HAL_GPIO_Init+0x2f0>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d013      	beq.n	8002a44 <HAL_GPIO_Init+0x1f0>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a4a      	ldr	r2, [pc, #296]	@ (8002b48 <HAL_GPIO_Init+0x2f4>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d00d      	beq.n	8002a40 <HAL_GPIO_Init+0x1ec>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a49      	ldr	r2, [pc, #292]	@ (8002b4c <HAL_GPIO_Init+0x2f8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d007      	beq.n	8002a3c <HAL_GPIO_Init+0x1e8>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a48      	ldr	r2, [pc, #288]	@ (8002b50 <HAL_GPIO_Init+0x2fc>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d101      	bne.n	8002a38 <HAL_GPIO_Init+0x1e4>
 8002a34:	2305      	movs	r3, #5
 8002a36:	e00a      	b.n	8002a4e <HAL_GPIO_Init+0x1fa>
 8002a38:	2306      	movs	r3, #6
 8002a3a:	e008      	b.n	8002a4e <HAL_GPIO_Init+0x1fa>
 8002a3c:	2304      	movs	r3, #4
 8002a3e:	e006      	b.n	8002a4e <HAL_GPIO_Init+0x1fa>
 8002a40:	2303      	movs	r3, #3
 8002a42:	e004      	b.n	8002a4e <HAL_GPIO_Init+0x1fa>
 8002a44:	2302      	movs	r3, #2
 8002a46:	e002      	b.n	8002a4e <HAL_GPIO_Init+0x1fa>
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e000      	b.n	8002a4e <HAL_GPIO_Init+0x1fa>
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	f002 0203 	and.w	r2, r2, #3
 8002a54:	0092      	lsls	r2, r2, #2
 8002a56:	4093      	lsls	r3, r2
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a5e:	4937      	ldr	r1, [pc, #220]	@ (8002b3c <HAL_GPIO_Init+0x2e8>)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	089b      	lsrs	r3, r3, #2
 8002a64:	3302      	adds	r3, #2
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a6c:	4b39      	ldr	r3, [pc, #228]	@ (8002b54 <HAL_GPIO_Init+0x300>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	43db      	mvns	r3, r3
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a90:	4a30      	ldr	r2, [pc, #192]	@ (8002b54 <HAL_GPIO_Init+0x300>)
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a96:	4b2f      	ldr	r3, [pc, #188]	@ (8002b54 <HAL_GPIO_Init+0x300>)
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002aba:	4a26      	ldr	r2, [pc, #152]	@ (8002b54 <HAL_GPIO_Init+0x300>)
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002ac0:	4b24      	ldr	r3, [pc, #144]	@ (8002b54 <HAL_GPIO_Init+0x300>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	4013      	ands	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8002b54 <HAL_GPIO_Init+0x300>)
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002aea:	4b1a      	ldr	r3, [pc, #104]	@ (8002b54 <HAL_GPIO_Init+0x300>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	43db      	mvns	r3, r3
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4013      	ands	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b0e:	4a11      	ldr	r2, [pc, #68]	@ (8002b54 <HAL_GPIO_Init+0x300>)
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	3301      	adds	r3, #1
 8002b18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	fa22 f303 	lsr.w	r3, r2, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f47f ae9d 	bne.w	8002864 <HAL_GPIO_Init+0x10>
  }
}
 8002b2a:	bf00      	nop
 8002b2c:	bf00      	nop
 8002b2e:	371c      	adds	r7, #28
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	40010000 	.word	0x40010000
 8002b40:	48000400 	.word	0x48000400
 8002b44:	48000800 	.word	0x48000800
 8002b48:	48000c00 	.word	0x48000c00
 8002b4c:	48001000 	.word	0x48001000
 8002b50:	48001400 	.word	0x48001400
 8002b54:	40010400 	.word	0x40010400

08002b58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	807b      	strh	r3, [r7, #2]
 8002b64:	4613      	mov	r3, r2
 8002b66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b68:	787b      	ldrb	r3, [r7, #1]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b6e:	887a      	ldrh	r2, [r7, #2]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b74:	e002      	b.n	8002b7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b76:	887a      	ldrh	r2, [r7, #2]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e08d      	b.n	8002cb6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d106      	bne.n	8002bb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7fe f8fa 	bl	8000da8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2224      	movs	r2, #36	@ 0x24
 8002bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0201 	bic.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002bd8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002be8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d107      	bne.n	8002c02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bfe:	609a      	str	r2, [r3, #8]
 8002c00:	e006      	b.n	8002c10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689a      	ldr	r2, [r3, #8]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002c0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d108      	bne.n	8002c2a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c26:	605a      	str	r2, [r3, #4]
 8002c28:	e007      	b.n	8002c3a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6812      	ldr	r2, [r2, #0]
 8002c44:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c4c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68da      	ldr	r2, [r3, #12]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691a      	ldr	r2, [r3, #16]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69d9      	ldr	r1, [r3, #28]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a1a      	ldr	r2, [r3, #32]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f042 0201 	orr.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b20      	cmp	r3, #32
 8002cd2:	d138      	bne.n	8002d46 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d101      	bne.n	8002ce2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e032      	b.n	8002d48 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2224      	movs	r2, #36	@ 0x24
 8002cee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0201 	bic.w	r2, r2, #1
 8002d00:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d10:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6819      	ldr	r1, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f042 0201 	orr.w	r2, r2, #1
 8002d30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2220      	movs	r2, #32
 8002d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	e000      	b.n	8002d48 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d46:	2302      	movs	r3, #2
  }
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b20      	cmp	r3, #32
 8002d68:	d139      	bne.n	8002dde <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d101      	bne.n	8002d78 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d74:	2302      	movs	r3, #2
 8002d76:	e033      	b.n	8002de0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2224      	movs	r2, #36	@ 0x24
 8002d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0201 	bic.w	r2, r2, #1
 8002d96:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002da6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	021b      	lsls	r3, r3, #8
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f042 0201 	orr.w	r2, r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	e000      	b.n	8002de0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002dde:	2302      	movs	r3, #2
  }
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e0c0      	b.n	8002f80 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d106      	bne.n	8002e18 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7fe f864 	bl	8000ee0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2203      	movs	r2, #3
 8002e1c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f001 f97c 	bl	8004122 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	73fb      	strb	r3, [r7, #15]
 8002e2e:	e03e      	b.n	8002eae <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e30:	7bfa      	ldrb	r2, [r7, #15]
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	440b      	add	r3, r1
 8002e3e:	3311      	adds	r3, #17
 8002e40:	2201      	movs	r2, #1
 8002e42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e44:	7bfa      	ldrb	r2, [r7, #15]
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	440b      	add	r3, r1
 8002e52:	3310      	adds	r3, #16
 8002e54:	7bfa      	ldrb	r2, [r7, #15]
 8002e56:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e58:	7bfa      	ldrb	r2, [r7, #15]
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	440b      	add	r3, r1
 8002e66:	3313      	adds	r3, #19
 8002e68:	2200      	movs	r2, #0
 8002e6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e6c:	7bfa      	ldrb	r2, [r7, #15]
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	4613      	mov	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	440b      	add	r3, r1
 8002e7a:	3320      	adds	r3, #32
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e80:	7bfa      	ldrb	r2, [r7, #15]
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	440b      	add	r3, r1
 8002e8e:	3324      	adds	r3, #36	@ 0x24
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	1c5a      	adds	r2, r3, #1
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	440b      	add	r3, r1
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	73fb      	strb	r3, [r7, #15]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	791b      	ldrb	r3, [r3, #4]
 8002eb2:	7bfa      	ldrb	r2, [r7, #15]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d3bb      	bcc.n	8002e30 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eb8:	2300      	movs	r3, #0
 8002eba:	73fb      	strb	r3, [r7, #15]
 8002ebc:	e044      	b.n	8002f48 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ebe:	7bfa      	ldrb	r2, [r7, #15]
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	440b      	add	r3, r1
 8002ecc:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ed4:	7bfa      	ldrb	r2, [r7, #15]
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	440b      	add	r3, r1
 8002ee2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ee6:	7bfa      	ldrb	r2, [r7, #15]
 8002ee8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002eea:	7bfa      	ldrb	r2, [r7, #15]
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	440b      	add	r3, r1
 8002ef8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002efc:	2200      	movs	r2, #0
 8002efe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f00:	7bfa      	ldrb	r2, [r7, #15]
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	440b      	add	r3, r1
 8002f0e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f16:	7bfa      	ldrb	r2, [r7, #15]
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	440b      	add	r3, r1
 8002f24:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f2c:	7bfa      	ldrb	r2, [r7, #15]
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	4613      	mov	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4413      	add	r3, r2
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	440b      	add	r3, r1
 8002f3a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
 8002f44:	3301      	adds	r3, #1
 8002f46:	73fb      	strb	r3, [r7, #15]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	791b      	ldrb	r3, [r3, #4]
 8002f4c:	7bfa      	ldrb	r2, [r7, #15]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d3b5      	bcc.n	8002ebe <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6818      	ldr	r0, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3304      	adds	r3, #4
 8002f5a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002f5e:	f001 f8fb 	bl	8004158 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	7a9b      	ldrb	r3, [r3, #10]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d102      	bne.n	8002f7e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f805 	bl	8002f88 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	f043 0302 	orr.w	r3, r3, #2
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d141      	bne.n	800306e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fea:	4b4b      	ldr	r3, [pc, #300]	@ (8003118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ff2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ff6:	d131      	bne.n	800305c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ff8:	4b47      	ldr	r3, [pc, #284]	@ (8003118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ffe:	4a46      	ldr	r2, [pc, #280]	@ (8003118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003000:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003004:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003008:	4b43      	ldr	r3, [pc, #268]	@ (8003118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003010:	4a41      	ldr	r2, [pc, #260]	@ (8003118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003012:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003016:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003018:	4b40      	ldr	r3, [pc, #256]	@ (800311c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2232      	movs	r2, #50	@ 0x32
 800301e:	fb02 f303 	mul.w	r3, r2, r3
 8003022:	4a3f      	ldr	r2, [pc, #252]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003024:	fba2 2303 	umull	r2, r3, r2, r3
 8003028:	0c9b      	lsrs	r3, r3, #18
 800302a:	3301      	adds	r3, #1
 800302c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800302e:	e002      	b.n	8003036 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	3b01      	subs	r3, #1
 8003034:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003036:	4b38      	ldr	r3, [pc, #224]	@ (8003118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800303e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003042:	d102      	bne.n	800304a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f2      	bne.n	8003030 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800304a:	4b33      	ldr	r3, [pc, #204]	@ (8003118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003052:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003056:	d158      	bne.n	800310a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e057      	b.n	800310c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800305c:	4b2e      	ldr	r3, [pc, #184]	@ (8003118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800305e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003062:	4a2d      	ldr	r2, [pc, #180]	@ (8003118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003064:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003068:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800306c:	e04d      	b.n	800310a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003074:	d141      	bne.n	80030fa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003076:	4b28      	ldr	r3, [pc, #160]	@ (8003118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800307e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003082:	d131      	bne.n	80030e8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003084:	4b24      	ldr	r3, [pc, #144]	@ (8003118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003086:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800308a:	4a23      	ldr	r2, [pc, #140]	@ (8003118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800308c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003090:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003094:	4b20      	ldr	r3, [pc, #128]	@ (8003118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800309c:	4a1e      	ldr	r2, [pc, #120]	@ (8003118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800309e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030a4:	4b1d      	ldr	r3, [pc, #116]	@ (800311c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2232      	movs	r2, #50	@ 0x32
 80030aa:	fb02 f303 	mul.w	r3, r2, r3
 80030ae:	4a1c      	ldr	r2, [pc, #112]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80030b0:	fba2 2303 	umull	r2, r3, r2, r3
 80030b4:	0c9b      	lsrs	r3, r3, #18
 80030b6:	3301      	adds	r3, #1
 80030b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030ba:	e002      	b.n	80030c2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	3b01      	subs	r3, #1
 80030c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030c2:	4b15      	ldr	r3, [pc, #84]	@ (8003118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ce:	d102      	bne.n	80030d6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f2      	bne.n	80030bc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030d6:	4b10      	ldr	r3, [pc, #64]	@ (8003118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030e2:	d112      	bne.n	800310a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e011      	b.n	800310c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80030f8:	e007      	b.n	800310a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030fa:	4b07      	ldr	r3, [pc, #28]	@ (8003118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003102:	4a05      	ldr	r2, [pc, #20]	@ (8003118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003104:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003108:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	40007000 	.word	0x40007000
 800311c:	20000000 	.word	0x20000000
 8003120:	431bde83 	.word	0x431bde83

08003124 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003128:	4b05      	ldr	r3, [pc, #20]	@ (8003140 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	4a04      	ldr	r2, [pc, #16]	@ (8003140 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800312e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003132:	6093      	str	r3, [r2, #8]
}
 8003134:	bf00      	nop
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	40007000 	.word	0x40007000

08003144 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b088      	sub	sp, #32
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e2fe      	b.n	8003754 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d075      	beq.n	800324e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003162:	4b97      	ldr	r3, [pc, #604]	@ (80033c0 <HAL_RCC_OscConfig+0x27c>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 030c 	and.w	r3, r3, #12
 800316a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800316c:	4b94      	ldr	r3, [pc, #592]	@ (80033c0 <HAL_RCC_OscConfig+0x27c>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f003 0303 	and.w	r3, r3, #3
 8003174:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	2b0c      	cmp	r3, #12
 800317a:	d102      	bne.n	8003182 <HAL_RCC_OscConfig+0x3e>
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	2b03      	cmp	r3, #3
 8003180:	d002      	beq.n	8003188 <HAL_RCC_OscConfig+0x44>
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d10b      	bne.n	80031a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003188:	4b8d      	ldr	r3, [pc, #564]	@ (80033c0 <HAL_RCC_OscConfig+0x27c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d05b      	beq.n	800324c <HAL_RCC_OscConfig+0x108>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d157      	bne.n	800324c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e2d9      	b.n	8003754 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031a8:	d106      	bne.n	80031b8 <HAL_RCC_OscConfig+0x74>
 80031aa:	4b85      	ldr	r3, [pc, #532]	@ (80033c0 <HAL_RCC_OscConfig+0x27c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a84      	ldr	r2, [pc, #528]	@ (80033c0 <HAL_RCC_OscConfig+0x27c>)
 80031b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	e01d      	b.n	80031f4 <HAL_RCC_OscConfig+0xb0>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031c0:	d10c      	bne.n	80031dc <HAL_RCC_OscConfig+0x98>
 80031c2:	4b7f      	ldr	r3, [pc, #508]	@ (80033c0 <HAL_RCC_OscConfig+0x27c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a7e      	ldr	r2, [pc, #504]	@ (80033c0 <HAL_RCC_OscConfig+0x27c>)
 80031c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	4b7c      	ldr	r3, [pc, #496]	@ (80033c0 <HAL_RCC_OscConfig+0x27c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a7b      	ldr	r2, [pc, #492]	@ (80033c0 <HAL_RCC_OscConfig+0x27c>)
 80031d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	e00b      	b.n	80031f4 <HAL_RCC_OscConfig+0xb0>
 80031dc:	4b78      	ldr	r3, [pc, #480]	@ (80033c0 <HAL_RCC_OscConfig+0x27c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a77      	ldr	r2, [pc, #476]	@ (80033c0 <HAL_RCC_OscConfig+0x27c>)
 80031e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031e6:	6013      	str	r3, [r2, #0]
 80031e8:	4b75      	ldr	r3, [pc, #468]	@ (80033c0 <HAL_RCC_OscConfig+0x27c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a74      	ldr	r2, [pc, #464]	@ (80033c0 <HAL_RCC_OscConfig+0x27c>)
 80031ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d013      	beq.n	8003224 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fc:	f7fd ff74 	bl	80010e8 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003204:	f7fd ff70 	bl	80010e8 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b64      	cmp	r3, #100	@ 0x64
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e29e      	b.n	8003754 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003216:	4b6a      	ldr	r3, [pc, #424]	@ (80033c0 <HAL_RCC_OscConfig+0x27c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d0f0      	beq.n	8003204 <HAL_RCC_OscConfig+0xc0>
 8003222:	e014      	b.n	800324e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003224:	f7fd ff60 	bl	80010e8 <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800322c:	f7fd ff5c 	bl	80010e8 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b64      	cmp	r3, #100	@ 0x64
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e28a      	b.n	8003754 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800323e:	4b60      	ldr	r3, [pc, #384]	@ (80033c0 <HAL_RCC_OscConfig+0x27c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f0      	bne.n	800322c <HAL_RCC_OscConfig+0xe8>
 800324a:	e000      	b.n	800324e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800324c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d075      	beq.n	8003346 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800325a:	4b59      	ldr	r3, [pc, #356]	@ (80033c0 <HAL_RCC_OscConfig+0x27c>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 030c 	and.w	r3, r3, #12
 8003262:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003264:	4b56      	ldr	r3, [pc, #344]	@ (80033c0 <HAL_RCC_OscConfig+0x27c>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f003 0303 	and.w	r3, r3, #3
 800326c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	2b0c      	cmp	r3, #12
 8003272:	d102      	bne.n	800327a <HAL_RCC_OscConfig+0x136>
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d002      	beq.n	8003280 <HAL_RCC_OscConfig+0x13c>
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	2b04      	cmp	r3, #4
 800327e:	d11f      	bne.n	80032c0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003280:	4b4f      	ldr	r3, [pc, #316]	@ (80033c0 <HAL_RCC_OscConfig+0x27c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003288:	2b00      	cmp	r3, #0
 800328a:	d005      	beq.n	8003298 <HAL_RCC_OscConfig+0x154>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e25d      	b.n	8003754 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003298:	4b49      	ldr	r3, [pc, #292]	@ (80033c0 <HAL_RCC_OscConfig+0x27c>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	061b      	lsls	r3, r3, #24
 80032a6:	4946      	ldr	r1, [pc, #280]	@ (80033c0 <HAL_RCC_OscConfig+0x27c>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80032ac:	4b45      	ldr	r3, [pc, #276]	@ (80033c4 <HAL_RCC_OscConfig+0x280>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7fd fecd 	bl	8001050 <HAL_InitTick>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d043      	beq.n	8003344 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e249      	b.n	8003754 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d023      	beq.n	8003310 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032c8:	4b3d      	ldr	r3, [pc, #244]	@ (80033c0 <HAL_RCC_OscConfig+0x27c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a3c      	ldr	r2, [pc, #240]	@ (80033c0 <HAL_RCC_OscConfig+0x27c>)
 80032ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d4:	f7fd ff08 	bl	80010e8 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032dc:	f7fd ff04 	bl	80010e8 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e232      	b.n	8003754 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032ee:	4b34      	ldr	r3, [pc, #208]	@ (80033c0 <HAL_RCC_OscConfig+0x27c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0f0      	beq.n	80032dc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032fa:	4b31      	ldr	r3, [pc, #196]	@ (80033c0 <HAL_RCC_OscConfig+0x27c>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	061b      	lsls	r3, r3, #24
 8003308:	492d      	ldr	r1, [pc, #180]	@ (80033c0 <HAL_RCC_OscConfig+0x27c>)
 800330a:	4313      	orrs	r3, r2
 800330c:	604b      	str	r3, [r1, #4]
 800330e:	e01a      	b.n	8003346 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003310:	4b2b      	ldr	r3, [pc, #172]	@ (80033c0 <HAL_RCC_OscConfig+0x27c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a2a      	ldr	r2, [pc, #168]	@ (80033c0 <HAL_RCC_OscConfig+0x27c>)
 8003316:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800331a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331c:	f7fd fee4 	bl	80010e8 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003324:	f7fd fee0 	bl	80010e8 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e20e      	b.n	8003754 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003336:	4b22      	ldr	r3, [pc, #136]	@ (80033c0 <HAL_RCC_OscConfig+0x27c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f0      	bne.n	8003324 <HAL_RCC_OscConfig+0x1e0>
 8003342:	e000      	b.n	8003346 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003344:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	2b00      	cmp	r3, #0
 8003350:	d041      	beq.n	80033d6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d01c      	beq.n	8003394 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800335a:	4b19      	ldr	r3, [pc, #100]	@ (80033c0 <HAL_RCC_OscConfig+0x27c>)
 800335c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003360:	4a17      	ldr	r2, [pc, #92]	@ (80033c0 <HAL_RCC_OscConfig+0x27c>)
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336a:	f7fd febd 	bl	80010e8 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003370:	e008      	b.n	8003384 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003372:	f7fd feb9 	bl	80010e8 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e1e7      	b.n	8003754 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003384:	4b0e      	ldr	r3, [pc, #56]	@ (80033c0 <HAL_RCC_OscConfig+0x27c>)
 8003386:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0ef      	beq.n	8003372 <HAL_RCC_OscConfig+0x22e>
 8003392:	e020      	b.n	80033d6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003394:	4b0a      	ldr	r3, [pc, #40]	@ (80033c0 <HAL_RCC_OscConfig+0x27c>)
 8003396:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800339a:	4a09      	ldr	r2, [pc, #36]	@ (80033c0 <HAL_RCC_OscConfig+0x27c>)
 800339c:	f023 0301 	bic.w	r3, r3, #1
 80033a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a4:	f7fd fea0 	bl	80010e8 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033aa:	e00d      	b.n	80033c8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ac:	f7fd fe9c 	bl	80010e8 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d906      	bls.n	80033c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e1ca      	b.n	8003754 <HAL_RCC_OscConfig+0x610>
 80033be:	bf00      	nop
 80033c0:	40021000 	.word	0x40021000
 80033c4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033c8:	4b8c      	ldr	r3, [pc, #560]	@ (80035fc <HAL_RCC_OscConfig+0x4b8>)
 80033ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1ea      	bne.n	80033ac <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0304 	and.w	r3, r3, #4
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 80a6 	beq.w	8003530 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033e4:	2300      	movs	r3, #0
 80033e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033e8:	4b84      	ldr	r3, [pc, #528]	@ (80035fc <HAL_RCC_OscConfig+0x4b8>)
 80033ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <HAL_RCC_OscConfig+0x2b4>
 80033f4:	2301      	movs	r3, #1
 80033f6:	e000      	b.n	80033fa <HAL_RCC_OscConfig+0x2b6>
 80033f8:	2300      	movs	r3, #0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00d      	beq.n	800341a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033fe:	4b7f      	ldr	r3, [pc, #508]	@ (80035fc <HAL_RCC_OscConfig+0x4b8>)
 8003400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003402:	4a7e      	ldr	r2, [pc, #504]	@ (80035fc <HAL_RCC_OscConfig+0x4b8>)
 8003404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003408:	6593      	str	r3, [r2, #88]	@ 0x58
 800340a:	4b7c      	ldr	r3, [pc, #496]	@ (80035fc <HAL_RCC_OscConfig+0x4b8>)
 800340c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800340e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003416:	2301      	movs	r3, #1
 8003418:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800341a:	4b79      	ldr	r3, [pc, #484]	@ (8003600 <HAL_RCC_OscConfig+0x4bc>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003422:	2b00      	cmp	r3, #0
 8003424:	d118      	bne.n	8003458 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003426:	4b76      	ldr	r3, [pc, #472]	@ (8003600 <HAL_RCC_OscConfig+0x4bc>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a75      	ldr	r2, [pc, #468]	@ (8003600 <HAL_RCC_OscConfig+0x4bc>)
 800342c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003432:	f7fd fe59 	bl	80010e8 <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003438:	e008      	b.n	800344c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800343a:	f7fd fe55 	bl	80010e8 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e183      	b.n	8003754 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800344c:	4b6c      	ldr	r3, [pc, #432]	@ (8003600 <HAL_RCC_OscConfig+0x4bc>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003454:	2b00      	cmp	r3, #0
 8003456:	d0f0      	beq.n	800343a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d108      	bne.n	8003472 <HAL_RCC_OscConfig+0x32e>
 8003460:	4b66      	ldr	r3, [pc, #408]	@ (80035fc <HAL_RCC_OscConfig+0x4b8>)
 8003462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003466:	4a65      	ldr	r2, [pc, #404]	@ (80035fc <HAL_RCC_OscConfig+0x4b8>)
 8003468:	f043 0301 	orr.w	r3, r3, #1
 800346c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003470:	e024      	b.n	80034bc <HAL_RCC_OscConfig+0x378>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	2b05      	cmp	r3, #5
 8003478:	d110      	bne.n	800349c <HAL_RCC_OscConfig+0x358>
 800347a:	4b60      	ldr	r3, [pc, #384]	@ (80035fc <HAL_RCC_OscConfig+0x4b8>)
 800347c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003480:	4a5e      	ldr	r2, [pc, #376]	@ (80035fc <HAL_RCC_OscConfig+0x4b8>)
 8003482:	f043 0304 	orr.w	r3, r3, #4
 8003486:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800348a:	4b5c      	ldr	r3, [pc, #368]	@ (80035fc <HAL_RCC_OscConfig+0x4b8>)
 800348c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003490:	4a5a      	ldr	r2, [pc, #360]	@ (80035fc <HAL_RCC_OscConfig+0x4b8>)
 8003492:	f043 0301 	orr.w	r3, r3, #1
 8003496:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800349a:	e00f      	b.n	80034bc <HAL_RCC_OscConfig+0x378>
 800349c:	4b57      	ldr	r3, [pc, #348]	@ (80035fc <HAL_RCC_OscConfig+0x4b8>)
 800349e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034a2:	4a56      	ldr	r2, [pc, #344]	@ (80035fc <HAL_RCC_OscConfig+0x4b8>)
 80034a4:	f023 0301 	bic.w	r3, r3, #1
 80034a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034ac:	4b53      	ldr	r3, [pc, #332]	@ (80035fc <HAL_RCC_OscConfig+0x4b8>)
 80034ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034b2:	4a52      	ldr	r2, [pc, #328]	@ (80035fc <HAL_RCC_OscConfig+0x4b8>)
 80034b4:	f023 0304 	bic.w	r3, r3, #4
 80034b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d016      	beq.n	80034f2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c4:	f7fd fe10 	bl	80010e8 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ca:	e00a      	b.n	80034e2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034cc:	f7fd fe0c 	bl	80010e8 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034da:	4293      	cmp	r3, r2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e138      	b.n	8003754 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034e2:	4b46      	ldr	r3, [pc, #280]	@ (80035fc <HAL_RCC_OscConfig+0x4b8>)
 80034e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0ed      	beq.n	80034cc <HAL_RCC_OscConfig+0x388>
 80034f0:	e015      	b.n	800351e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f2:	f7fd fdf9 	bl	80010e8 <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034f8:	e00a      	b.n	8003510 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034fa:	f7fd fdf5 	bl	80010e8 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003508:	4293      	cmp	r3, r2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e121      	b.n	8003754 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003510:	4b3a      	ldr	r3, [pc, #232]	@ (80035fc <HAL_RCC_OscConfig+0x4b8>)
 8003512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1ed      	bne.n	80034fa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800351e:	7ffb      	ldrb	r3, [r7, #31]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d105      	bne.n	8003530 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003524:	4b35      	ldr	r3, [pc, #212]	@ (80035fc <HAL_RCC_OscConfig+0x4b8>)
 8003526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003528:	4a34      	ldr	r2, [pc, #208]	@ (80035fc <HAL_RCC_OscConfig+0x4b8>)
 800352a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800352e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0320 	and.w	r3, r3, #32
 8003538:	2b00      	cmp	r3, #0
 800353a:	d03c      	beq.n	80035b6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d01c      	beq.n	800357e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003544:	4b2d      	ldr	r3, [pc, #180]	@ (80035fc <HAL_RCC_OscConfig+0x4b8>)
 8003546:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800354a:	4a2c      	ldr	r2, [pc, #176]	@ (80035fc <HAL_RCC_OscConfig+0x4b8>)
 800354c:	f043 0301 	orr.w	r3, r3, #1
 8003550:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003554:	f7fd fdc8 	bl	80010e8 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800355c:	f7fd fdc4 	bl	80010e8 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e0f2      	b.n	8003754 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800356e:	4b23      	ldr	r3, [pc, #140]	@ (80035fc <HAL_RCC_OscConfig+0x4b8>)
 8003570:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0ef      	beq.n	800355c <HAL_RCC_OscConfig+0x418>
 800357c:	e01b      	b.n	80035b6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800357e:	4b1f      	ldr	r3, [pc, #124]	@ (80035fc <HAL_RCC_OscConfig+0x4b8>)
 8003580:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003584:	4a1d      	ldr	r2, [pc, #116]	@ (80035fc <HAL_RCC_OscConfig+0x4b8>)
 8003586:	f023 0301 	bic.w	r3, r3, #1
 800358a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800358e:	f7fd fdab 	bl	80010e8 <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003596:	f7fd fda7 	bl	80010e8 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e0d5      	b.n	8003754 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035a8:	4b14      	ldr	r3, [pc, #80]	@ (80035fc <HAL_RCC_OscConfig+0x4b8>)
 80035aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1ef      	bne.n	8003596 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 80c9 	beq.w	8003752 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035c0:	4b0e      	ldr	r3, [pc, #56]	@ (80035fc <HAL_RCC_OscConfig+0x4b8>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 030c 	and.w	r3, r3, #12
 80035c8:	2b0c      	cmp	r3, #12
 80035ca:	f000 8083 	beq.w	80036d4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d15e      	bne.n	8003694 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d6:	4b09      	ldr	r3, [pc, #36]	@ (80035fc <HAL_RCC_OscConfig+0x4b8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a08      	ldr	r2, [pc, #32]	@ (80035fc <HAL_RCC_OscConfig+0x4b8>)
 80035dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e2:	f7fd fd81 	bl	80010e8 <HAL_GetTick>
 80035e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035e8:	e00c      	b.n	8003604 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ea:	f7fd fd7d 	bl	80010e8 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d905      	bls.n	8003604 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e0ab      	b.n	8003754 <HAL_RCC_OscConfig+0x610>
 80035fc:	40021000 	.word	0x40021000
 8003600:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003604:	4b55      	ldr	r3, [pc, #340]	@ (800375c <HAL_RCC_OscConfig+0x618>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1ec      	bne.n	80035ea <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003610:	4b52      	ldr	r3, [pc, #328]	@ (800375c <HAL_RCC_OscConfig+0x618>)
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	4b52      	ldr	r3, [pc, #328]	@ (8003760 <HAL_RCC_OscConfig+0x61c>)
 8003616:	4013      	ands	r3, r2
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6a11      	ldr	r1, [r2, #32]
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003620:	3a01      	subs	r2, #1
 8003622:	0112      	lsls	r2, r2, #4
 8003624:	4311      	orrs	r1, r2
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800362a:	0212      	lsls	r2, r2, #8
 800362c:	4311      	orrs	r1, r2
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003632:	0852      	lsrs	r2, r2, #1
 8003634:	3a01      	subs	r2, #1
 8003636:	0552      	lsls	r2, r2, #21
 8003638:	4311      	orrs	r1, r2
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800363e:	0852      	lsrs	r2, r2, #1
 8003640:	3a01      	subs	r2, #1
 8003642:	0652      	lsls	r2, r2, #25
 8003644:	4311      	orrs	r1, r2
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800364a:	06d2      	lsls	r2, r2, #27
 800364c:	430a      	orrs	r2, r1
 800364e:	4943      	ldr	r1, [pc, #268]	@ (800375c <HAL_RCC_OscConfig+0x618>)
 8003650:	4313      	orrs	r3, r2
 8003652:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003654:	4b41      	ldr	r3, [pc, #260]	@ (800375c <HAL_RCC_OscConfig+0x618>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a40      	ldr	r2, [pc, #256]	@ (800375c <HAL_RCC_OscConfig+0x618>)
 800365a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800365e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003660:	4b3e      	ldr	r3, [pc, #248]	@ (800375c <HAL_RCC_OscConfig+0x618>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	4a3d      	ldr	r2, [pc, #244]	@ (800375c <HAL_RCC_OscConfig+0x618>)
 8003666:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800366a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366c:	f7fd fd3c 	bl	80010e8 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003674:	f7fd fd38 	bl	80010e8 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e066      	b.n	8003754 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003686:	4b35      	ldr	r3, [pc, #212]	@ (800375c <HAL_RCC_OscConfig+0x618>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0f0      	beq.n	8003674 <HAL_RCC_OscConfig+0x530>
 8003692:	e05e      	b.n	8003752 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003694:	4b31      	ldr	r3, [pc, #196]	@ (800375c <HAL_RCC_OscConfig+0x618>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a30      	ldr	r2, [pc, #192]	@ (800375c <HAL_RCC_OscConfig+0x618>)
 800369a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800369e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a0:	f7fd fd22 	bl	80010e8 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a8:	f7fd fd1e 	bl	80010e8 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e04c      	b.n	8003754 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ba:	4b28      	ldr	r3, [pc, #160]	@ (800375c <HAL_RCC_OscConfig+0x618>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f0      	bne.n	80036a8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80036c6:	4b25      	ldr	r3, [pc, #148]	@ (800375c <HAL_RCC_OscConfig+0x618>)
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	4924      	ldr	r1, [pc, #144]	@ (800375c <HAL_RCC_OscConfig+0x618>)
 80036cc:	4b25      	ldr	r3, [pc, #148]	@ (8003764 <HAL_RCC_OscConfig+0x620>)
 80036ce:	4013      	ands	r3, r2
 80036d0:	60cb      	str	r3, [r1, #12]
 80036d2:	e03e      	b.n	8003752 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e039      	b.n	8003754 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80036e0:	4b1e      	ldr	r3, [pc, #120]	@ (800375c <HAL_RCC_OscConfig+0x618>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f003 0203 	and.w	r2, r3, #3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d12c      	bne.n	800374e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fe:	3b01      	subs	r3, #1
 8003700:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003702:	429a      	cmp	r2, r3
 8003704:	d123      	bne.n	800374e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003710:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003712:	429a      	cmp	r2, r3
 8003714:	d11b      	bne.n	800374e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003720:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003722:	429a      	cmp	r2, r3
 8003724:	d113      	bne.n	800374e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003730:	085b      	lsrs	r3, r3, #1
 8003732:	3b01      	subs	r3, #1
 8003734:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003736:	429a      	cmp	r2, r3
 8003738:	d109      	bne.n	800374e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003744:	085b      	lsrs	r3, r3, #1
 8003746:	3b01      	subs	r3, #1
 8003748:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800374a:	429a      	cmp	r2, r3
 800374c:	d001      	beq.n	8003752 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e000      	b.n	8003754 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3720      	adds	r7, #32
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40021000 	.word	0x40021000
 8003760:	019f800c 	.word	0x019f800c
 8003764:	feeefffc 	.word	0xfeeefffc

08003768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003772:	2300      	movs	r3, #0
 8003774:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e11e      	b.n	80039be <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003780:	4b91      	ldr	r3, [pc, #580]	@ (80039c8 <HAL_RCC_ClockConfig+0x260>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 030f 	and.w	r3, r3, #15
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d910      	bls.n	80037b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800378e:	4b8e      	ldr	r3, [pc, #568]	@ (80039c8 <HAL_RCC_ClockConfig+0x260>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f023 020f 	bic.w	r2, r3, #15
 8003796:	498c      	ldr	r1, [pc, #560]	@ (80039c8 <HAL_RCC_ClockConfig+0x260>)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	4313      	orrs	r3, r2
 800379c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800379e:	4b8a      	ldr	r3, [pc, #552]	@ (80039c8 <HAL_RCC_ClockConfig+0x260>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d001      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e106      	b.n	80039be <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d073      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b03      	cmp	r3, #3
 80037c2:	d129      	bne.n	8003818 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037c4:	4b81      	ldr	r3, [pc, #516]	@ (80039cc <HAL_RCC_ClockConfig+0x264>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e0f4      	b.n	80039be <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80037d4:	f000 f966 	bl	8003aa4 <RCC_GetSysClockFreqFromPLLSource>
 80037d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	4a7c      	ldr	r2, [pc, #496]	@ (80039d0 <HAL_RCC_ClockConfig+0x268>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d93f      	bls.n	8003862 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80037e2:	4b7a      	ldr	r3, [pc, #488]	@ (80039cc <HAL_RCC_ClockConfig+0x264>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d009      	beq.n	8003802 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d033      	beq.n	8003862 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d12f      	bne.n	8003862 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003802:	4b72      	ldr	r3, [pc, #456]	@ (80039cc <HAL_RCC_ClockConfig+0x264>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800380a:	4a70      	ldr	r2, [pc, #448]	@ (80039cc <HAL_RCC_ClockConfig+0x264>)
 800380c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003810:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003812:	2380      	movs	r3, #128	@ 0x80
 8003814:	617b      	str	r3, [r7, #20]
 8003816:	e024      	b.n	8003862 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2b02      	cmp	r3, #2
 800381e:	d107      	bne.n	8003830 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003820:	4b6a      	ldr	r3, [pc, #424]	@ (80039cc <HAL_RCC_ClockConfig+0x264>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d109      	bne.n	8003840 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e0c6      	b.n	80039be <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003830:	4b66      	ldr	r3, [pc, #408]	@ (80039cc <HAL_RCC_ClockConfig+0x264>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e0be      	b.n	80039be <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003840:	f000 f8ce 	bl	80039e0 <HAL_RCC_GetSysClockFreq>
 8003844:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	4a61      	ldr	r2, [pc, #388]	@ (80039d0 <HAL_RCC_ClockConfig+0x268>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d909      	bls.n	8003862 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800384e:	4b5f      	ldr	r3, [pc, #380]	@ (80039cc <HAL_RCC_ClockConfig+0x264>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003856:	4a5d      	ldr	r2, [pc, #372]	@ (80039cc <HAL_RCC_ClockConfig+0x264>)
 8003858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800385c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800385e:	2380      	movs	r3, #128	@ 0x80
 8003860:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003862:	4b5a      	ldr	r3, [pc, #360]	@ (80039cc <HAL_RCC_ClockConfig+0x264>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f023 0203 	bic.w	r2, r3, #3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	4957      	ldr	r1, [pc, #348]	@ (80039cc <HAL_RCC_ClockConfig+0x264>)
 8003870:	4313      	orrs	r3, r2
 8003872:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003874:	f7fd fc38 	bl	80010e8 <HAL_GetTick>
 8003878:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800387a:	e00a      	b.n	8003892 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800387c:	f7fd fc34 	bl	80010e8 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	f241 3288 	movw	r2, #5000	@ 0x1388
 800388a:	4293      	cmp	r3, r2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e095      	b.n	80039be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003892:	4b4e      	ldr	r3, [pc, #312]	@ (80039cc <HAL_RCC_ClockConfig+0x264>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 020c 	and.w	r2, r3, #12
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d1eb      	bne.n	800387c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d023      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038bc:	4b43      	ldr	r3, [pc, #268]	@ (80039cc <HAL_RCC_ClockConfig+0x264>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	4a42      	ldr	r2, [pc, #264]	@ (80039cc <HAL_RCC_ClockConfig+0x264>)
 80038c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80038c6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d007      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80038d4:	4b3d      	ldr	r3, [pc, #244]	@ (80039cc <HAL_RCC_ClockConfig+0x264>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80038dc:	4a3b      	ldr	r2, [pc, #236]	@ (80039cc <HAL_RCC_ClockConfig+0x264>)
 80038de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80038e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e4:	4b39      	ldr	r3, [pc, #228]	@ (80039cc <HAL_RCC_ClockConfig+0x264>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	4936      	ldr	r1, [pc, #216]	@ (80039cc <HAL_RCC_ClockConfig+0x264>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	608b      	str	r3, [r1, #8]
 80038f6:	e008      	b.n	800390a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	2b80      	cmp	r3, #128	@ 0x80
 80038fc:	d105      	bne.n	800390a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80038fe:	4b33      	ldr	r3, [pc, #204]	@ (80039cc <HAL_RCC_ClockConfig+0x264>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	4a32      	ldr	r2, [pc, #200]	@ (80039cc <HAL_RCC_ClockConfig+0x264>)
 8003904:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003908:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800390a:	4b2f      	ldr	r3, [pc, #188]	@ (80039c8 <HAL_RCC_ClockConfig+0x260>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	429a      	cmp	r2, r3
 8003916:	d21d      	bcs.n	8003954 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003918:	4b2b      	ldr	r3, [pc, #172]	@ (80039c8 <HAL_RCC_ClockConfig+0x260>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f023 020f 	bic.w	r2, r3, #15
 8003920:	4929      	ldr	r1, [pc, #164]	@ (80039c8 <HAL_RCC_ClockConfig+0x260>)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	4313      	orrs	r3, r2
 8003926:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003928:	f7fd fbde 	bl	80010e8 <HAL_GetTick>
 800392c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800392e:	e00a      	b.n	8003946 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003930:	f7fd fbda 	bl	80010e8 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800393e:	4293      	cmp	r3, r2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e03b      	b.n	80039be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003946:	4b20      	ldr	r3, [pc, #128]	@ (80039c8 <HAL_RCC_ClockConfig+0x260>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d1ed      	bne.n	8003930 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	2b00      	cmp	r3, #0
 800395e:	d008      	beq.n	8003972 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003960:	4b1a      	ldr	r3, [pc, #104]	@ (80039cc <HAL_RCC_ClockConfig+0x264>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	4917      	ldr	r1, [pc, #92]	@ (80039cc <HAL_RCC_ClockConfig+0x264>)
 800396e:	4313      	orrs	r3, r2
 8003970:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d009      	beq.n	8003992 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800397e:	4b13      	ldr	r3, [pc, #76]	@ (80039cc <HAL_RCC_ClockConfig+0x264>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	490f      	ldr	r1, [pc, #60]	@ (80039cc <HAL_RCC_ClockConfig+0x264>)
 800398e:	4313      	orrs	r3, r2
 8003990:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003992:	f000 f825 	bl	80039e0 <HAL_RCC_GetSysClockFreq>
 8003996:	4602      	mov	r2, r0
 8003998:	4b0c      	ldr	r3, [pc, #48]	@ (80039cc <HAL_RCC_ClockConfig+0x264>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	091b      	lsrs	r3, r3, #4
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	490c      	ldr	r1, [pc, #48]	@ (80039d4 <HAL_RCC_ClockConfig+0x26c>)
 80039a4:	5ccb      	ldrb	r3, [r1, r3]
 80039a6:	f003 031f 	and.w	r3, r3, #31
 80039aa:	fa22 f303 	lsr.w	r3, r2, r3
 80039ae:	4a0a      	ldr	r2, [pc, #40]	@ (80039d8 <HAL_RCC_ClockConfig+0x270>)
 80039b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80039b2:	4b0a      	ldr	r3, [pc, #40]	@ (80039dc <HAL_RCC_ClockConfig+0x274>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fd fb4a 	bl	8001050 <HAL_InitTick>
 80039bc:	4603      	mov	r3, r0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40022000 	.word	0x40022000
 80039cc:	40021000 	.word	0x40021000
 80039d0:	04c4b400 	.word	0x04c4b400
 80039d4:	08004204 	.word	0x08004204
 80039d8:	20000000 	.word	0x20000000
 80039dc:	20000004 	.word	0x20000004

080039e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80039e6:	4b2c      	ldr	r3, [pc, #176]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 030c 	and.w	r3, r3, #12
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d102      	bne.n	80039f8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039f2:	4b2a      	ldr	r3, [pc, #168]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0xbc>)
 80039f4:	613b      	str	r3, [r7, #16]
 80039f6:	e047      	b.n	8003a88 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80039f8:	4b27      	ldr	r3, [pc, #156]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 030c 	and.w	r3, r3, #12
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d102      	bne.n	8003a0a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a04:	4b26      	ldr	r3, [pc, #152]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a06:	613b      	str	r3, [r7, #16]
 8003a08:	e03e      	b.n	8003a88 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003a0a:	4b23      	ldr	r3, [pc, #140]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 030c 	and.w	r3, r3, #12
 8003a12:	2b0c      	cmp	r3, #12
 8003a14:	d136      	bne.n	8003a84 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a16:	4b20      	ldr	r3, [pc, #128]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a20:	4b1d      	ldr	r3, [pc, #116]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	091b      	lsrs	r3, r3, #4
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2b03      	cmp	r3, #3
 8003a32:	d10c      	bne.n	8003a4e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a34:	4a1a      	ldr	r2, [pc, #104]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3c:	4a16      	ldr	r2, [pc, #88]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a3e:	68d2      	ldr	r2, [r2, #12]
 8003a40:	0a12      	lsrs	r2, r2, #8
 8003a42:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a46:	fb02 f303 	mul.w	r3, r2, r3
 8003a4a:	617b      	str	r3, [r7, #20]
      break;
 8003a4c:	e00c      	b.n	8003a68 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a4e:	4a13      	ldr	r2, [pc, #76]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a56:	4a10      	ldr	r2, [pc, #64]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a58:	68d2      	ldr	r2, [r2, #12]
 8003a5a:	0a12      	lsrs	r2, r2, #8
 8003a5c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a60:	fb02 f303 	mul.w	r3, r2, r3
 8003a64:	617b      	str	r3, [r7, #20]
      break;
 8003a66:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a68:	4b0b      	ldr	r3, [pc, #44]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	0e5b      	lsrs	r3, r3, #25
 8003a6e:	f003 0303 	and.w	r3, r3, #3
 8003a72:	3301      	adds	r3, #1
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a80:	613b      	str	r3, [r7, #16]
 8003a82:	e001      	b.n	8003a88 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003a84:	2300      	movs	r3, #0
 8003a86:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003a88:	693b      	ldr	r3, [r7, #16]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	371c      	adds	r7, #28
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	00f42400 	.word	0x00f42400
 8003aa0:	007a1200 	.word	0x007a1200

08003aa4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8003b24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8003b24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	091b      	lsrs	r3, r3, #4
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	3301      	adds	r3, #1
 8003ac0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	2b03      	cmp	r3, #3
 8003ac6:	d10c      	bne.n	8003ae2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ac8:	4a17      	ldr	r2, [pc, #92]	@ (8003b28 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad0:	4a14      	ldr	r2, [pc, #80]	@ (8003b24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ad2:	68d2      	ldr	r2, [r2, #12]
 8003ad4:	0a12      	lsrs	r2, r2, #8
 8003ad6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003ada:	fb02 f303 	mul.w	r3, r2, r3
 8003ade:	617b      	str	r3, [r7, #20]
    break;
 8003ae0:	e00c      	b.n	8003afc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ae2:	4a12      	ldr	r2, [pc, #72]	@ (8003b2c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aea:	4a0e      	ldr	r2, [pc, #56]	@ (8003b24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003aec:	68d2      	ldr	r2, [r2, #12]
 8003aee:	0a12      	lsrs	r2, r2, #8
 8003af0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003af4:	fb02 f303 	mul.w	r3, r2, r3
 8003af8:	617b      	str	r3, [r7, #20]
    break;
 8003afa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003afc:	4b09      	ldr	r3, [pc, #36]	@ (8003b24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	0e5b      	lsrs	r3, r3, #25
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	3301      	adds	r3, #1
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b14:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003b16:	687b      	ldr	r3, [r7, #4]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	371c      	adds	r7, #28
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	40021000 	.word	0x40021000
 8003b28:	007a1200 	.word	0x007a1200
 8003b2c:	00f42400 	.word	0x00f42400

08003b30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b38:	2300      	movs	r3, #0
 8003b3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 8098 	beq.w	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b52:	4b43      	ldr	r3, [pc, #268]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10d      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b5e:	4b40      	ldr	r3, [pc, #256]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b62:	4a3f      	ldr	r2, [pc, #252]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b68:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b6a:	4b3d      	ldr	r3, [pc, #244]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b72:	60bb      	str	r3, [r7, #8]
 8003b74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b76:	2301      	movs	r3, #1
 8003b78:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b7a:	4b3a      	ldr	r3, [pc, #232]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a39      	ldr	r2, [pc, #228]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b86:	f7fd faaf 	bl	80010e8 <HAL_GetTick>
 8003b8a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b8c:	e009      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b8e:	f7fd faab 	bl	80010e8 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d902      	bls.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	74fb      	strb	r3, [r7, #19]
        break;
 8003ba0:	e005      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ba2:	4b30      	ldr	r3, [pc, #192]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0ef      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003bae:	7cfb      	ldrb	r3, [r7, #19]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d159      	bne.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bbe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d01e      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d019      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003bd0:	4b23      	ldr	r3, [pc, #140]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bda:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bdc:	4b20      	ldr	r3, [pc, #128]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003be2:	4a1f      	ldr	r2, [pc, #124]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003be8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bec:	4b1c      	ldr	r3, [pc, #112]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bf2:	4a1b      	ldr	r2, [pc, #108]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bfc:	4a18      	ldr	r2, [pc, #96]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d016      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0e:	f7fd fa6b 	bl	80010e8 <HAL_GetTick>
 8003c12:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c14:	e00b      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c16:	f7fd fa67 	bl	80010e8 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d902      	bls.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	74fb      	strb	r3, [r7, #19]
            break;
 8003c2c:	e006      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0ec      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003c3c:	7cfb      	ldrb	r3, [r7, #19]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10b      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c42:	4b07      	ldr	r3, [pc, #28]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c50:	4903      	ldr	r1, [pc, #12]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003c58:	e008      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c5a:	7cfb      	ldrb	r3, [r7, #19]
 8003c5c:	74bb      	strb	r3, [r7, #18]
 8003c5e:	e005      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c60:	40021000 	.word	0x40021000
 8003c64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c68:	7cfb      	ldrb	r3, [r7, #19]
 8003c6a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c6c:	7c7b      	ldrb	r3, [r7, #17]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d105      	bne.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c72:	4ba7      	ldr	r3, [pc, #668]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c76:	4aa6      	ldr	r2, [pc, #664]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c7c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c8a:	4ba1      	ldr	r3, [pc, #644]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c90:	f023 0203 	bic.w	r2, r3, #3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	499d      	ldr	r1, [pc, #628]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cac:	4b98      	ldr	r3, [pc, #608]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb2:	f023 020c 	bic.w	r2, r3, #12
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	4995      	ldr	r1, [pc, #596]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0304 	and.w	r3, r3, #4
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cce:	4b90      	ldr	r3, [pc, #576]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	498c      	ldr	r1, [pc, #560]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0308 	and.w	r3, r3, #8
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00a      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cf0:	4b87      	ldr	r3, [pc, #540]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cf6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	4984      	ldr	r1, [pc, #528]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0310 	and.w	r3, r3, #16
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d12:	4b7f      	ldr	r3, [pc, #508]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	497b      	ldr	r1, [pc, #492]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0320 	and.w	r3, r3, #32
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00a      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d34:	4b76      	ldr	r3, [pc, #472]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d3a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	4973      	ldr	r1, [pc, #460]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d56:	4b6e      	ldr	r3, [pc, #440]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d5c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	496a      	ldr	r1, [pc, #424]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00a      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d78:	4b65      	ldr	r3, [pc, #404]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d7e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	4962      	ldr	r1, [pc, #392]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d9a:	4b5d      	ldr	r3, [pc, #372]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da8:	4959      	ldr	r1, [pc, #356]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00a      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003dbc:	4b54      	ldr	r3, [pc, #336]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003dc2:	f023 0203 	bic.w	r2, r3, #3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dca:	4951      	ldr	r1, [pc, #324]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00a      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dde:	4b4c      	ldr	r3, [pc, #304]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dec:	4948      	ldr	r1, [pc, #288]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d015      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e00:	4b43      	ldr	r3, [pc, #268]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e06:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0e:	4940      	ldr	r1, [pc, #256]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e1e:	d105      	bne.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e20:	4b3b      	ldr	r3, [pc, #236]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	4a3a      	ldr	r2, [pc, #232]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e2a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d015      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e38:	4b35      	ldr	r3, [pc, #212]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e3e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e46:	4932      	ldr	r1, [pc, #200]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e56:	d105      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e58:	4b2d      	ldr	r3, [pc, #180]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	4a2c      	ldr	r2, [pc, #176]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e62:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d015      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e70:	4b27      	ldr	r3, [pc, #156]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e76:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e7e:	4924      	ldr	r1, [pc, #144]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e8e:	d105      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e90:	4b1f      	ldr	r3, [pc, #124]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	4a1e      	ldr	r2, [pc, #120]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e9a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d015      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ea8:	4b19      	ldr	r3, [pc, #100]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb6:	4916      	ldr	r1, [pc, #88]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ec6:	d105      	bne.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ec8:	4b11      	ldr	r3, [pc, #68]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	4a10      	ldr	r2, [pc, #64]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ece:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ed2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d019      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eee:	4908      	ldr	r1, [pc, #32]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003efe:	d109      	bne.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f00:	4b03      	ldr	r3, [pc, #12]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	4a02      	ldr	r2, [pc, #8]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f0a:	60d3      	str	r3, [r2, #12]
 8003f0c:	e002      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003f0e:	bf00      	nop
 8003f10:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d015      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f20:	4b29      	ldr	r3, [pc, #164]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f26:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2e:	4926      	ldr	r1, [pc, #152]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f3e:	d105      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f40:	4b21      	ldr	r3, [pc, #132]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	4a20      	ldr	r2, [pc, #128]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f4a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d015      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003f58:	4b1b      	ldr	r3, [pc, #108]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f5e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f66:	4918      	ldr	r1, [pc, #96]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f76:	d105      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f78:	4b13      	ldr	r3, [pc, #76]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	4a12      	ldr	r2, [pc, #72]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f82:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d015      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003f90:	4b0d      	ldr	r3, [pc, #52]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f9e:	490a      	ldr	r1, [pc, #40]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003faa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fae:	d105      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fb0:	4b05      	ldr	r3, [pc, #20]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	4a04      	ldr	r2, [pc, #16]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003fbc:	7cbb      	ldrb	r3, [r7, #18]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40021000 	.word	0x40021000

08003fcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e09d      	b.n	800411a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d108      	bne.n	8003ff8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fee:	d009      	beq.n	8004004 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	61da      	str	r2, [r3, #28]
 8003ff6:	e005      	b.n	8004004 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d106      	bne.n	8004024 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7fc ff1c 	bl	8000e5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800403a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004044:	d902      	bls.n	800404c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004046:	2300      	movs	r3, #0
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	e002      	b.n	8004052 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800404c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004050:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800405a:	d007      	beq.n	800406c <HAL_SPI_Init+0xa0>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004064:	d002      	beq.n	800406c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800407c:	431a      	orrs	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	431a      	orrs	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	431a      	orrs	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040a4:	431a      	orrs	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ae:	ea42 0103 	orr.w	r1, r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	0c1b      	lsrs	r3, r3, #16
 80040c8:	f003 0204 	and.w	r2, r3, #4
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d0:	f003 0310 	and.w	r3, r3, #16
 80040d4:	431a      	orrs	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040da:	f003 0308 	and.w	r3, r3, #8
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80040e8:	ea42 0103 	orr.w	r1, r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	69da      	ldr	r2, [r3, #28]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004108:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004122:	b480      	push	{r7}
 8004124:	b085      	sub	sp, #20
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800412a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800412e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004136:	b29a      	uxth	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	b29b      	uxth	r3, r3
 800413c:	43db      	mvns	r3, r3
 800413e:	b29b      	uxth	r3, r3
 8004140:	4013      	ands	r3, r2
 8004142:	b29a      	uxth	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3714      	adds	r7, #20
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	1d3b      	adds	r3, r7, #4
 8004162:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2201      	movs	r2, #1
 800416a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <memset>:
 8004194:	4402      	add	r2, r0
 8004196:	4603      	mov	r3, r0
 8004198:	4293      	cmp	r3, r2
 800419a:	d100      	bne.n	800419e <memset+0xa>
 800419c:	4770      	bx	lr
 800419e:	f803 1b01 	strb.w	r1, [r3], #1
 80041a2:	e7f9      	b.n	8004198 <memset+0x4>

080041a4 <__libc_init_array>:
 80041a4:	b570      	push	{r4, r5, r6, lr}
 80041a6:	4d0d      	ldr	r5, [pc, #52]	@ (80041dc <__libc_init_array+0x38>)
 80041a8:	4c0d      	ldr	r4, [pc, #52]	@ (80041e0 <__libc_init_array+0x3c>)
 80041aa:	1b64      	subs	r4, r4, r5
 80041ac:	10a4      	asrs	r4, r4, #2
 80041ae:	2600      	movs	r6, #0
 80041b0:	42a6      	cmp	r6, r4
 80041b2:	d109      	bne.n	80041c8 <__libc_init_array+0x24>
 80041b4:	4d0b      	ldr	r5, [pc, #44]	@ (80041e4 <__libc_init_array+0x40>)
 80041b6:	4c0c      	ldr	r4, [pc, #48]	@ (80041e8 <__libc_init_array+0x44>)
 80041b8:	f000 f818 	bl	80041ec <_init>
 80041bc:	1b64      	subs	r4, r4, r5
 80041be:	10a4      	asrs	r4, r4, #2
 80041c0:	2600      	movs	r6, #0
 80041c2:	42a6      	cmp	r6, r4
 80041c4:	d105      	bne.n	80041d2 <__libc_init_array+0x2e>
 80041c6:	bd70      	pop	{r4, r5, r6, pc}
 80041c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80041cc:	4798      	blx	r3
 80041ce:	3601      	adds	r6, #1
 80041d0:	e7ee      	b.n	80041b0 <__libc_init_array+0xc>
 80041d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80041d6:	4798      	blx	r3
 80041d8:	3601      	adds	r6, #1
 80041da:	e7f2      	b.n	80041c2 <__libc_init_array+0x1e>
 80041dc:	08004214 	.word	0x08004214
 80041e0:	08004214 	.word	0x08004214
 80041e4:	08004214 	.word	0x08004214
 80041e8:	08004218 	.word	0x08004218

080041ec <_init>:
 80041ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ee:	bf00      	nop
 80041f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041f2:	bc08      	pop	{r3}
 80041f4:	469e      	mov	lr, r3
 80041f6:	4770      	bx	lr

080041f8 <_fini>:
 80041f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041fa:	bf00      	nop
 80041fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041fe:	bc08      	pop	{r3}
 8004200:	469e      	mov	lr, r3
 8004202:	4770      	bx	lr
